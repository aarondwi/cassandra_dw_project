// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package skripsi.cf_transaksi_jurusan_kategori_0_1;

import routines.data_checker;
import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_1
//import java.util.List;
import routines.data_checker.*;
import java.util.UUID;

@SuppressWarnings("unused")
/**
 * Job: cf_transaksi_jurusan_kategori Purpose: cf_transaksi_jurusan_kategori & cf_transaksi_koleksi_kondisi<br>
 * Description: cf_transaksi_jurusan_kategori & cf_transaksi_koleksi_kondisi <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class cf_transaksi_jurusan_kategori implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "cf_transaksi_jurusan_kategori";
	private final String projectName = "SKRIPSI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					cf_transaksi_jurusan_kategori.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(cf_transaksi_jurusan_kategori.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tCassandraConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCassandraOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnite_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCassandraConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCassandraConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCassandraConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tCassandraConnection_1 begin ] start
				 */

				ok_Hash.put("tCassandraConnection_1", false);
				start_Hash.put("tCassandraConnection_1",
						System.currentTimeMillis());

				currentComponent = "tCassandraConnection_1";

				int tos_count_tCassandraConnection_1 = 0;

				class BytesLimit65535_tCassandraConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tCassandraConnection_1().limitLog4jByte();

				/**
				 * [tCassandraConnection_1 begin ] stop
				 */

				/**
				 * [tCassandraConnection_1 main ] start
				 */

				currentComponent = "tCassandraConnection_1";

				com.datastax.driver.core.Cluster cluster_tCassandraConnection_1 = com.datastax.driver.core.Cluster
						.builder()
						.addContactPoints("".split(","))
						.withPort(Integer.valueOf("9042"))

						.withCredentials(
								"cassandra",
								routines.system.PasswordEncryptUtil
										.decryptPassword("553abcc4df382af15a0ab58d844e78f7"))

						.build();

				com.datastax.driver.core.Session connection_tCassandraConnection_1 = null;
				connection_tCassandraConnection_1 = cluster_tCassandraConnection_1
						.connect();
				globalMap.put("cluster_tCassandraConnection_1",
						cluster_tCassandraConnection_1);
				globalMap.put("connection_tCassandraConnection_1",
						connection_tCassandraConnection_1);

				tos_count_tCassandraConnection_1++;

				/**
				 * [tCassandraConnection_1 main ] stop
				 */

				/**
				 * [tCassandraConnection_1 process_data_begin ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tCassandraConnection_1 process_data_end ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 process_data_end ] stop
				 */

				/**
				 * [tCassandraConnection_1 end ] start
				 */

				currentComponent = "tCassandraConnection_1";

				ok_Hash.put("tCassandraConnection_1", true);
				end_Hash.put("tCassandraConnection_1",
						System.currentTimeMillis());

				/**
				 * [tCassandraConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCassandraConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tCassandraConnection_1 finally ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCassandraConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				class BytesLimit65535_tDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBConnection_1().limitLog4jByte();

				String url_tDBConnection_1 = "jdbc:postgresql://" + "" + ":"
						+ "5432" + "/" + "skripsi";

				String dbUser_tDBConnection_1 = "skripsiuser";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("478b7e3876ff95369c5ef7cde683fb80");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager
						.getDrivers();
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1
							.nextElement();
					java.util.List<String> driverList_tDBConnection_1 = java.util.Arrays
							.<String> asList("com.amazon.redshift.jdbc.Driver",
									"com.amazon.redshift.jdbc41.Driver");
					if (driverList_tDBConnection_1.contains(d_tDBConnection_1
							.getClass().getName())) {
						try {
							java.sql.DriverManager
									.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager
									.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", "");

				globalMap
						.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public int id_transaksi;

		public int getId_transaksi() {
			return this.id_transaksi;
		}

		public java.util.Date tgl_pinjam;

		public java.util.Date getTgl_pinjam() {
			return this.tgl_pinjam;
		}

		public java.util.Date tgl_batas;

		public java.util.Date getTgl_batas() {
			return this.tgl_batas;
		}

		public java.util.Date tgl_kembali;

		public java.util.Date getTgl_kembali() {
			return this.tgl_kembali;
		}

		public Double denda;

		public Double getDenda() {
			return this.denda;
		}

		public Double terbayar;

		public Double getTerbayar() {
			return this.terbayar;
		}

		public int tahun;

		public int getTahun() {
			return this.tahun;
		}

		public String unique_id;

		public String getUnique_id() {
			return this.unique_id;
		}

		public String kode_anggota;

		public String getKode_anggota() {
			return this.kode_anggota;
		}

		public String kode_buku;

		public String getKode_buku() {
			return this.kode_buku;
		}

		public Integer kode_judul;

		public Integer getKode_judul() {
			return this.kode_judul;
		}

		public String judul;

		public String getJudul() {
			return this.judul;
		}

		public String nama_jurusan;

		public String getNama_jurusan() {
			return this.nama_jurusan;
		}

		public String fakultas;

		public String getFakultas() {
			return this.fakultas;
		}

		public String nama_kategori;

		public String getNama_kategori() {
			return this.nama_kategori;
		}

		public String nama_koleksi;

		public String getNama_koleksi() {
			return this.nama_koleksi;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public Integer k099a;

		public Integer getK099a() {
			return this.k099a;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.id_transaksi = dis.readInt();

					this.tgl_pinjam = readDate(dis);

					this.tgl_batas = readDate(dis);

					this.tgl_kembali = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.denda = null;
					} else {
						this.denda = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.terbayar = null;
					} else {
						this.terbayar = dis.readDouble();
					}

					this.tahun = dis.readInt();

					this.unique_id = readString(dis);

					this.kode_anggota = readString(dis);

					this.kode_buku = readString(dis);

					this.kode_judul = readInteger(dis);

					this.judul = readString(dis);

					this.nama_jurusan = readString(dis);

					this.fakultas = readString(dis);

					this.nama_kategori = readString(dis);

					this.nama_koleksi = readString(dis);

					this.status = readString(dis);

					this.k099a = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_transaksi);

				// java.util.Date

				writeDate(this.tgl_pinjam, dos);

				// java.util.Date

				writeDate(this.tgl_batas, dos);

				// java.util.Date

				writeDate(this.tgl_kembali, dos);

				// Double

				if (this.denda == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.denda);
				}

				// Double

				if (this.terbayar == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.terbayar);
				}

				// int

				dos.writeInt(this.tahun);

				// String

				writeString(this.unique_id, dos);

				// String

				writeString(this.kode_anggota, dos);

				// String

				writeString(this.kode_buku, dos);

				// Integer

				writeInteger(this.kode_judul, dos);

				// String

				writeString(this.judul, dos);

				// String

				writeString(this.nama_jurusan, dos);

				// String

				writeString(this.fakultas, dos);

				// String

				writeString(this.nama_kategori, dos);

				// String

				writeString(this.nama_koleksi, dos);

				// String

				writeString(this.status, dos);

				// Integer

				writeInteger(this.k099a, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_transaksi=" + String.valueOf(id_transaksi));
			sb.append(",tgl_pinjam=" + String.valueOf(tgl_pinjam));
			sb.append(",tgl_batas=" + String.valueOf(tgl_batas));
			sb.append(",tgl_kembali=" + String.valueOf(tgl_kembali));
			sb.append(",denda=" + String.valueOf(denda));
			sb.append(",terbayar=" + String.valueOf(terbayar));
			sb.append(",tahun=" + String.valueOf(tahun));
			sb.append(",unique_id=" + unique_id);
			sb.append(",kode_anggota=" + kode_anggota);
			sb.append(",kode_buku=" + kode_buku);
			sb.append(",kode_judul=" + String.valueOf(kode_judul));
			sb.append(",judul=" + judul);
			sb.append(",nama_jurusan=" + nama_jurusan);
			sb.append(",fakultas=" + fakultas);
			sb.append(",nama_kategori=" + nama_kategori);
			sb.append(",nama_koleksi=" + nama_koleksi);
			sb.append(",status=" + status);
			sb.append(",k099a=" + String.valueOf(k099a));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public Integer fntranscid;

		public Integer getFntranscid() {
			return this.fntranscid;
		}

		public Integer fckd_induk;

		public Integer getFckd_induk() {
			return this.fckd_induk;
		}

		public String k999a;

		public String getK999a() {
			return this.k999a;
		}

		public java.util.Date fdtgl_pinjam;

		public java.util.Date getFdtgl_pinjam() {
			return this.fdtgl_pinjam;
		}

		public java.util.Date fdtgl_batas;

		public java.util.Date getFdtgl_batas() {
			return this.fdtgl_batas;
		}

		public java.util.Date fdtgl_kembali;

		public java.util.Date getFdtgl_kembali() {
			return this.fdtgl_kembali;
		}

		public String fckd_operator;

		public String getFckd_operator() {
			return this.fckd_operator;
		}

		public Double Denda;

		public Double getDenda() {
			return this.Denda;
		}

		public Double Terbayar;

		public Double getTerbayar() {
			return this.Terbayar;
		}

		public Integer tahun;

		public Integer getTahun() {
			return this.tahun;
		}

		public String unique_id;

		public String getUnique_id() {
			return this.unique_id;
		}

		public String kode_anggota;

		public String getKode_anggota() {
			return this.kode_anggota;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.fntranscid = readInteger(dis);

					this.fckd_induk = readInteger(dis);

					this.k999a = readString(dis);

					this.fdtgl_pinjam = readDate(dis);

					this.fdtgl_batas = readDate(dis);

					this.fdtgl_kembali = readDate(dis);

					this.fckd_operator = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Denda = null;
					} else {
						this.Denda = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Terbayar = null;
					} else {
						this.Terbayar = dis.readDouble();
					}

					this.tahun = readInteger(dis);

					this.unique_id = readString(dis);

					this.kode_anggota = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.fntranscid, dos);

				// Integer

				writeInteger(this.fckd_induk, dos);

				// String

				writeString(this.k999a, dos);

				// java.util.Date

				writeDate(this.fdtgl_pinjam, dos);

				// java.util.Date

				writeDate(this.fdtgl_batas, dos);

				// java.util.Date

				writeDate(this.fdtgl_kembali, dos);

				// String

				writeString(this.fckd_operator, dos);

				// Double

				if (this.Denda == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Denda);
				}

				// Double

				if (this.Terbayar == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Terbayar);
				}

				// Integer

				writeInteger(this.tahun, dos);

				// String

				writeString(this.unique_id, dos);

				// String

				writeString(this.kode_anggota, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fntranscid=" + String.valueOf(fntranscid));
			sb.append(",fckd_induk=" + String.valueOf(fckd_induk));
			sb.append(",k999a=" + k999a);
			sb.append(",fdtgl_pinjam=" + String.valueOf(fdtgl_pinjam));
			sb.append(",fdtgl_batas=" + String.valueOf(fdtgl_batas));
			sb.append(",fdtgl_kembali=" + String.valueOf(fdtgl_kembali));
			sb.append(",fckd_operator=" + fckd_operator);
			sb.append(",Denda=" + String.valueOf(Denda));
			sb.append(",Terbayar=" + String.valueOf(Terbayar));
			sb.append(",tahun=" + String.valueOf(tahun));
			sb.append(",unique_id=" + unique_id);
			sb.append(",kode_anggota=" + kode_anggota);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public Integer fntranscid;

		public Integer getFntranscid() {
			return this.fntranscid;
		}

		public String fckd_induk;

		public String getFckd_induk() {
			return this.fckd_induk;
		}

		public String k999a;

		public String getK999a() {
			return this.k999a;
		}

		public String fdtgl_pinjam;

		public String getFdtgl_pinjam() {
			return this.fdtgl_pinjam;
		}

		public String fdtgl_batas;

		public String getFdtgl_batas() {
			return this.fdtgl_batas;
		}

		public String fdtgl_kembali;

		public String getFdtgl_kembali() {
			return this.fdtgl_kembali;
		}

		public String fckd_operator;

		public String getFckd_operator() {
			return this.fckd_operator;
		}

		public Double Denda;

		public Double getDenda() {
			return this.Denda;
		}

		public Double Terbayar;

		public Double getTerbayar() {
			return this.Terbayar;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.fntranscid = readInteger(dis);

					this.fckd_induk = readString(dis);

					this.k999a = readString(dis);

					this.fdtgl_pinjam = readString(dis);

					this.fdtgl_batas = readString(dis);

					this.fdtgl_kembali = readString(dis);

					this.fckd_operator = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Denda = null;
					} else {
						this.Denda = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Terbayar = null;
					} else {
						this.Terbayar = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.fntranscid, dos);

				// String

				writeString(this.fckd_induk, dos);

				// String

				writeString(this.k999a, dos);

				// String

				writeString(this.fdtgl_pinjam, dos);

				// String

				writeString(this.fdtgl_batas, dos);

				// String

				writeString(this.fdtgl_kembali, dos);

				// String

				writeString(this.fckd_operator, dos);

				// Double

				if (this.Denda == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Denda);
				}

				// Double

				if (this.Terbayar == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Terbayar);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fntranscid=" + String.valueOf(fntranscid));
			sb.append(",fckd_induk=" + fckd_induk);
			sb.append(",k999a=" + k999a);
			sb.append(",fdtgl_pinjam=" + fdtgl_pinjam);
			sb.append(",fdtgl_batas=" + fdtgl_batas);
			sb.append(",fdtgl_kembali=" + fdtgl_kembali);
			sb.append(",fckd_operator=" + fckd_operator);
			sb.append(",Denda=" + String.valueOf(Denda));
			sb.append(",Terbayar=" + String.valueOf(Terbayar));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements
			routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public Integer fntranscid;

		public Integer getFntranscid() {
			return this.fntranscid;
		}

		public String fckd_induk;

		public String getFckd_induk() {
			return this.fckd_induk;
		}

		public String k999a;

		public String getK999a() {
			return this.k999a;
		}

		public String fdtgl_pinjam;

		public String getFdtgl_pinjam() {
			return this.fdtgl_pinjam;
		}

		public String fdtgl_batas;

		public String getFdtgl_batas() {
			return this.fdtgl_batas;
		}

		public String fdtgl_kembali;

		public String getFdtgl_kembali() {
			return this.fdtgl_kembali;
		}

		public String fckd_operator;

		public String getFckd_operator() {
			return this.fckd_operator;
		}

		public Double Denda;

		public Double getDenda() {
			return this.Denda;
		}

		public Double Terbayar;

		public Double getTerbayar() {
			return this.Terbayar;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.fntranscid = readInteger(dis);

					this.fckd_induk = readString(dis);

					this.k999a = readString(dis);

					this.fdtgl_pinjam = readString(dis);

					this.fdtgl_batas = readString(dis);

					this.fdtgl_kembali = readString(dis);

					this.fckd_operator = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Denda = null;
					} else {
						this.Denda = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Terbayar = null;
					} else {
						this.Terbayar = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.fntranscid, dos);

				// String

				writeString(this.fckd_induk, dos);

				// String

				writeString(this.k999a, dos);

				// String

				writeString(this.fdtgl_pinjam, dos);

				// String

				writeString(this.fdtgl_batas, dos);

				// String

				writeString(this.fdtgl_kembali, dos);

				// String

				writeString(this.fckd_operator, dos);

				// Double

				if (this.Denda == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Denda);
				}

				// Double

				if (this.Terbayar == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Terbayar);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fntranscid=" + String.valueOf(fntranscid));
			sb.append(",fckd_induk=" + fckd_induk);
			sb.append(",k999a=" + k999a);
			sb.append(",fdtgl_pinjam=" + fdtgl_pinjam);
			sb.append(",fdtgl_batas=" + fdtgl_batas);
			sb.append(",fdtgl_kembali=" + fdtgl_kembali);
			sb.append(",fckd_operator=" + fckd_operator);
			sb.append(",Denda=" + String.valueOf(Denda));
			sb.append(",Terbayar=" + String.valueOf(Terbayar));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_4Process(globalMap);
				tFileInputDelimited_1Process(globalMap);
				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row6Struct row6 = new row6Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tCassandraOutput_1 begin ] start
				 */

				ok_Hash.put("tCassandraOutput_1", false);
				start_Hash
						.put("tCassandraOutput_1", System.currentTimeMillis());

				currentComponent = "tCassandraOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tCassandraOutput_1 = 0;

				class BytesLimit65535_tCassandraOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tCassandraOutput_1().limitLog4jByte();

				com.datastax.driver.core.Cluster cluster_tCassandraOutput_1 = (com.datastax.driver.core.Cluster) globalMap
						.get("cluster_tCassandraConnection_1");
				com.datastax.driver.core.Session connection_tCassandraOutput_1 = (com.datastax.driver.core.Session) globalMap
						.get("connection_tCassandraConnection_1");

				int nb_line_tCassandraOutput_1 = 0;
				com.datastax.driver.core.PreparedStatement prepareStmt_tCassandraOutput_1 = null;
				prepareStmt_tCassandraOutput_1 = connection_tCassandraOutput_1
						.prepare("INSERT INTO "
								+ StringHandling.DQUOTE("skripsi")
								+ "."
								+ StringHandling
										.DQUOTE("cf_transaksi_jurusan_kategori")
								+ " (\"id_transaksi\",\"tgl_pinjam\",\"tgl_batas\",\"tgl_kembali\",denda,terbayar,\"kode_buku\",\"kode_judul\",\"status_sekarang\",judul,\"nama_jurusan\",fakultas,\"nama_kategori\",\"nama_koleksi\",tahun,\"unique_id\",\"kode_anggota\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				com.datastax.driver.core.BoundStatement boundStmt_tCassandraOutput_1 = null;

				java.util.List<String> columns_tCassandraOutput_1 = new java.util.ArrayList<String>();

				columns_tCassandraOutput_1.add("id_transaksi");

				columns_tCassandraOutput_1.add("tgl_pinjam");

				columns_tCassandraOutput_1.add("tgl_batas");

				columns_tCassandraOutput_1.add("tgl_kembali");

				columns_tCassandraOutput_1.add("denda");

				columns_tCassandraOutput_1.add("terbayar");

				columns_tCassandraOutput_1.add("kode_buku");

				columns_tCassandraOutput_1.add("kode_judul");

				columns_tCassandraOutput_1.add("status");

				columns_tCassandraOutput_1.add("judul");

				columns_tCassandraOutput_1.add("nama_jurusan");

				columns_tCassandraOutput_1.add("fakultas");

				columns_tCassandraOutput_1.add("nama_kategori");

				columns_tCassandraOutput_1.add("nama_koleksi");

				columns_tCassandraOutput_1.add("tahun");

				columns_tCassandraOutput_1.add("unique_id");

				columns_tCassandraOutput_1.add("kode_anggota");

				org.talend.bigdata.cassandra.BatchExecutor cassandraBatchExec_tCassandraOutput_1 = new org.talend.bigdata.cassandra.BatchExecutor(
						connection_tCassandraOutput_1,
						StringHandling.DQUOTE("skripsi"),
						StringHandling.DQUOTE("cf_transaksi_jurusan_kategori"),
						columns_tCassandraOutput_1,
						org.talend.bigdata.cassandra.BatchGroupingKey
								.fromString("PARTITION"), 1000, true, 5);

				/**
				 * [tCassandraOutput_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
						.get("tHash_Lookup_row11"));

				row11Struct row11HashKey = new row11Struct();
				row11Struct row11Default = new row11Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
						.get("tHash_Lookup_row12"));

				row12Struct row12HashKey = new row12Struct();
				row12Struct row12Default = new row12Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				class BytesLimit65535_tJavaRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_1().limitLog4jByte();

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				class BytesLimit65535_tDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_1().limitLog4jByte();

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "select * from transaksi";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.fntranscid = null;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.fntranscid = rs_tDBInput_1.getInt(1);
							} else {
								row1.fntranscid = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.fckd_induk = null;
						} else {

							row1.fckd_induk = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.k999a = null;
						} else {

							row1.k999a = routines.system.JDBCUtil.getString(
									rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.fdtgl_pinjam = null;
						} else {

							row1.fdtgl_pinjam = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.fdtgl_batas = null;
						} else {

							row1.fdtgl_batas = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.fdtgl_kembali = null;
						} else {

							row1.fdtgl_kembali = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.fckd_operator = null;
						} else {

							row1.fckd_operator = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.Denda = null;
						} else {

							if (rs_tDBInput_1.getObject(8) != null) {
								row1.Denda = rs_tDBInput_1.getDouble(8);
							} else {
								row1.Denda = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.Terbayar = null;
						} else {

							if (rs_tDBInput_1.getObject(9) != null) {
								row1.Terbayar = rs_tDBInput_1.getDouble(9);
							} else {
								row1.Terbayar = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						row6.fntranscid = row1.fntranscid;
						row6.Denda = row1.Denda;
						row6.Terbayar = row1.Terbayar;
						row6.fckd_operator = row1.fckd_operator;
						row6.k999a = row1.k999a;

						row6.fckd_induk = data_checker
								.computeJurusan(row1.fckd_induk);
						row6.fdtgl_pinjam = data_checker
								.computeDate(row1.fdtgl_pinjam);
						row6.fdtgl_batas = data_checker
								.computeDate(row1.fdtgl_batas);
						row6.fdtgl_kembali = data_checker
								.computeDate(row1.fdtgl_kembali);
						row6.tahun = data_checker
								.computeYear(row1.fdtgl_pinjam);

						row6.unique_id = UUID.randomUUID().toString();
						row6.kode_anggota = row1.fckd_induk;
						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row8"
						// /////////////////////////////////////////////

						boolean forceLooprow8 = false;

						row8Struct row8ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row8HashKey.k999a = row6.k999a;

							row8HashKey.hashCodeDirty = true;

							tHash_Lookup_row8.lookup(row8HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.k999a = '"
							// + row8HashKey.k999a + "'");
						} // G 071

						row8Struct row8 = null;

						row8Struct fromLookup_row8 = null;
						row8 = row8Default;

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.hasNext()) { // G 099

							fromLookup_row8 = tHash_Lookup_row8.next();

						} // G 099

						if (fromLookup_row8 != null) {
							row8 = fromLookup_row8;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row10"
						// /////////////////////////////////////////////

						boolean forceLooprow10 = false;

						row10Struct row10ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row10HashKey.knokat = row8.knokat;

							row10HashKey.hashCodeDirty = true;

							tHash_Lookup_row10.lookup(row10HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.knokat = '"
							// + row10HashKey.knokat + "'");
						} // G 071

						row10Struct row10 = null;

						row10Struct fromLookup_row10 = null;
						row10 = row10Default;

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.hasNext()) { // G 099

							fromLookup_row10 = tHash_Lookup_row10.next();

						} // G 099

						if (fromLookup_row10 != null) {
							row10 = fromLookup_row10;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row11"
						// /////////////////////////////////////////////

						boolean forceLooprow11 = false;

						row11Struct row11ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_row11__kode_jurusan = row6.fckd_induk;
							if (exprKeyValue_row11__kode_jurusan == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								row11HashKey.kode_jurusan = (int) (Integer) exprKeyValue_row11__kode_jurusan;
							}

							row11HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_row11.lookup(row11HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.kode_jurusan = '"
							// + row11HashKey.kode_jurusan + "'");
						} // G 071

						row11Struct row11 = null;

						row11Struct fromLookup_row11 = null;
						row11 = row11Default;

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.hasNext()) { // G 099

							fromLookup_row11 = tHash_Lookup_row11.next();

						} // G 099

						if (fromLookup_row11 != null) {
							row11 = fromLookup_row11;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row12"
						// /////////////////////////////////////////////

						boolean forceLooprow12 = false;

						row12Struct row12ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row12HashKey.fckd_jnskol = row8.fckd_jnskol;

							row12HashKey.hashCodeDirty = true;

							tHash_Lookup_row12.lookup(row12HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row12 != null
								&& tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.fckd_jnskol = '"
							// + row12HashKey.fckd_jnskol + "'");
						} // G 071

						row12Struct row12 = null;

						row12Struct fromLookup_row12 = null;
						row12 = row12Default;

						if (tHash_Lookup_row12 != null
								&& tHash_Lookup_row12.hasNext()) { // G 099

							fromLookup_row12 = tHash_Lookup_row12.next();

						} // G 099

						if (fromLookup_row12 != null) {
							row12 = fromLookup_row12;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row15"
						// /////////////////////////////////////////////

						boolean forceLooprow15 = false;

						row15Struct row15ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row15HashKey.kode_kategori = row10.k099a;

							row15HashKey.hashCodeDirty = true;

							tHash_Lookup_row15.lookup(row15HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row15 != null
								&& tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.kode_kategori = '"
							// + row15HashKey.kode_kategori + "'");
						} // G 071

						row15Struct row15 = null;

						row15Struct fromLookup_row15 = null;
						row15 = row15Default;

						if (tHash_Lookup_row15 != null
								&& tHash_Lookup_row15.hasNext()) { // G 099

							fromLookup_row15 = tHash_Lookup_row15.next();

						} // G 099

						if (fromLookup_row15 != null) {
							row15 = fromLookup_row15;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row16"
						// /////////////////////////////////////////////

						boolean forceLooprow16 = false;

						row16Struct row16ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row16HashKey.kode_kondisi = row8.status;

							row16HashKey.hashCodeDirty = true;

							tHash_Lookup_row16.lookup(row16HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row16 != null
								&& tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.kode_kondisi = '"
							// + row16HashKey.kode_kondisi + "'");
						} // G 071

						row16Struct row16 = null;

						row16Struct fromLookup_row16 = null;
						row16 = row16Default;

						if (tHash_Lookup_row16 != null
								&& tHash_Lookup_row16.hasNext()) { // G 099

							fromLookup_row16 = tHash_Lookup_row16.next();

						} // G 099

						if (fromLookup_row16 != null) {
							row16 = fromLookup_row16;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

							// # Output table : 'out1'
							out1_tmp.id_transaksi = row6.fntranscid;
							out1_tmp.tgl_pinjam = row6.fdtgl_pinjam;
							out1_tmp.tgl_batas = row6.fdtgl_batas;
							out1_tmp.tgl_kembali = row6.fdtgl_kembali;
							out1_tmp.denda = row6.Denda;
							out1_tmp.terbayar = row6.Terbayar;
							out1_tmp.tahun = row6.tahun;
							out1_tmp.unique_id = row6.unique_id;
							out1_tmp.kode_anggota = row6.kode_anggota;
							out1_tmp.kode_buku = row8.k999a;
							out1_tmp.kode_judul = row8.knokat;
							out1_tmp.judul = row10.k245a;
							out1_tmp.nama_jurusan = row11.nama_jurusan;
							out1_tmp.fakultas = row11.fakultas;
							out1_tmp.nama_kategori = row15.nama_kategori;
							out1_tmp.nama_koleksi = row12.k099l;
							out1_tmp.status = row16.kondisi;
							out1_tmp.k099a = row10.k099a;
							out1 = out1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
						// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tCassandraOutput_1 main ] start
							 */

							currentComponent = "tCassandraOutput_1";

							// out1
							// out1

							if (execStat) {
								runStat.updateStatOnConnection("out1"
										+ iterateId, 1, 1);
							}

							boundStmt_tCassandraOutput_1 = new com.datastax.driver.core.BoundStatement(
									prepareStmt_tCassandraOutput_1);

							boundStmt_tCassandraOutput_1.setInt(0,
									out1.id_transaksi);
							if (out1.tgl_pinjam == null) {
								boundStmt_tCassandraOutput_1.setToNull(1);
							} else {
								boundStmt_tCassandraOutput_1
										.setDate(
												1,
												com.datastax.driver.core.LocalDate
														.fromMillisSinceEpoch(out1.tgl_pinjam
																.getTime()));
							}
							if (out1.tgl_batas == null) {
								boundStmt_tCassandraOutput_1.setToNull(2);
							} else {
								boundStmt_tCassandraOutput_1
										.setDate(
												2,
												com.datastax.driver.core.LocalDate
														.fromMillisSinceEpoch(out1.tgl_batas
																.getTime()));
							}
							if (out1.tgl_kembali == null) {
								boundStmt_tCassandraOutput_1.setToNull(3);
							} else {
								boundStmt_tCassandraOutput_1
										.setDate(
												3,
												com.datastax.driver.core.LocalDate
														.fromMillisSinceEpoch(out1.tgl_kembali
																.getTime()));
							}
							if (out1.denda == null) {
								boundStmt_tCassandraOutput_1.setToNull(4);
							} else {
								boundStmt_tCassandraOutput_1.setDouble(4,
										out1.denda);
							}
							if (out1.terbayar == null) {
								boundStmt_tCassandraOutput_1.setToNull(5);
							} else {
								boundStmt_tCassandraOutput_1.setDouble(5,
										out1.terbayar);
							}
							if (out1.kode_buku == null) {
								boundStmt_tCassandraOutput_1.setToNull(6);
							} else {
								boundStmt_tCassandraOutput_1.setString(6,
										out1.kode_buku);
							}
							if (out1.kode_judul == null) {
								boundStmt_tCassandraOutput_1.setToNull(7);
							} else {
								boundStmt_tCassandraOutput_1.setInt(7,
										out1.kode_judul);
							}
							if (out1.status == null) {
								boundStmt_tCassandraOutput_1.setToNull(8);
							} else {
								boundStmt_tCassandraOutput_1.setString(8,
										out1.status);
							}
							if (out1.judul == null) {
								boundStmt_tCassandraOutput_1.setToNull(9);
							} else {
								boundStmt_tCassandraOutput_1.setString(9,
										out1.judul);
							}
							if (out1.nama_jurusan == null) {
								boundStmt_tCassandraOutput_1.setToNull(10);
							} else {
								boundStmt_tCassandraOutput_1.setString(10,
										out1.nama_jurusan);
							}
							if (out1.fakultas == null) {
								boundStmt_tCassandraOutput_1.setToNull(11);
							} else {
								boundStmt_tCassandraOutput_1.setString(11,
										out1.fakultas);
							}
							if (out1.nama_kategori == null) {
								boundStmt_tCassandraOutput_1.setToNull(12);
							} else {
								boundStmt_tCassandraOutput_1.setString(12,
										out1.nama_kategori);
							}
							if (out1.nama_koleksi == null) {
								boundStmt_tCassandraOutput_1.setToNull(13);
							} else {
								boundStmt_tCassandraOutput_1.setString(13,
										out1.nama_koleksi);
							}
							boundStmt_tCassandraOutput_1.setInt(14, out1.tahun);
							if (out1.unique_id == null) {
								boundStmt_tCassandraOutput_1.setToNull(15);
							} else {
								boundStmt_tCassandraOutput_1.setUUID(15,
										java.util.UUID
												.fromString(out1.unique_id));
							}
							if (out1.kode_anggota == null) {
								boundStmt_tCassandraOutput_1.setToNull(16);
							} else {
								boundStmt_tCassandraOutput_1.setString(16,
										out1.kode_anggota);
							}

							cassandraBatchExec_tCassandraOutput_1
									.addOrExecBatch(boundStmt_tCassandraOutput_1);

							nb_line_tCassandraOutput_1++;

							tos_count_tCassandraOutput_1++;

							/**
							 * [tCassandraOutput_1 main ] stop
							 */

							/**
							 * [tCassandraOutput_1 process_data_begin ] start
							 */

							currentComponent = "tCassandraOutput_1";

							/**
							 * [tCassandraOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tCassandraOutput_1 process_data_end ] start
							 */

							currentComponent = "tCassandraOutput_1";

							/**
							 * [tCassandraOutput_1 process_data_end ] stop
							 */

						} // End of branch "out1"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					stmt_tDBInput_1.close();

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				if (tHash_Lookup_row11 != null) {
					tHash_Lookup_row11.endGet();
				}
				globalMap.remove("tHash_Lookup_row11");

				if (tHash_Lookup_row12 != null) {
					tHash_Lookup_row12.endGet();
				}
				globalMap.remove("tHash_Lookup_row12");

				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tCassandraOutput_1 end ] start
				 */

				currentComponent = "tCassandraOutput_1";

				cassandraBatchExec_tCassandraOutput_1.endBatch();
				globalMap.put("tCassandraOutput_1_NB_LINE",
						nb_line_tCassandraOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tCassandraOutput_1", true);
				end_Hash.put("tCassandraOutput_1", System.currentTimeMillis());

				/**
				 * [tCassandraOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row10");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row12");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row11");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row15");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row16");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tCassandraOutput_1 finally ] start
				 */

				currentComponent = "tCassandraOutput_1";

				/**
				 * [tCassandraOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String k999a;

		public String getK999a() {
			return this.k999a;
		}

		public Integer knokat;

		public Integer getKnokat() {
			return this.knokat;
		}

		public Integer fnkd_lokasi;

		public Integer getFnkd_lokasi() {
			return this.fnkd_lokasi;
		}

		public String fckd_jnskol;

		public String getFckd_jnskol() {
			return this.fckd_jnskol;
		}

		public java.util.Date fdtgl_input;

		public java.util.Date getFdtgl_input() {
			return this.fdtgl_input;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public java.util.Date tgl_dtg;

		public java.util.Date getTgl_dtg() {
			return this.tgl_dtg;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.k999a == null) ? 0 : this.k999a.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.k999a == null) {
				if (other.k999a != null)
					return false;

			} else if (!this.k999a.equals(other.k999a))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.k999a = this.k999a;
			other.knokat = this.knokat;
			other.fnkd_lokasi = this.fnkd_lokasi;
			other.fckd_jnskol = this.fckd_jnskol;
			other.fdtgl_input = this.fdtgl_input;
			other.status = this.status;
			other.tgl_dtg = this.tgl_dtg;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.k999a = this.k999a;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.k999a = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.k999a, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.knokat = readInteger(dis, ois);

				this.fnkd_lokasi = readInteger(dis, ois);

				this.fckd_jnskol = readString(dis, ois);

				this.fdtgl_input = readDate(dis, ois);

				this.status = readString(dis, ois);

				this.tgl_dtg = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.knokat, dos, oos);

				writeInteger(this.fnkd_lokasi, dos, oos);

				writeString(this.fckd_jnskol, dos, oos);

				writeDate(this.fdtgl_input, dos, oos);

				writeString(this.status, dos, oos);

				writeDate(this.tgl_dtg, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("k999a=" + k999a);
			sb.append(",knokat=" + String.valueOf(knokat));
			sb.append(",fnkd_lokasi=" + String.valueOf(fnkd_lokasi));
			sb.append(",fckd_jnskol=" + fckd_jnskol);
			sb.append(",fdtgl_input=" + String.valueOf(fdtgl_input));
			sb.append(",status=" + status);
			sb.append(",tgl_dtg=" + String.valueOf(tgl_dtg));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.k999a, other.k999a);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public String k999a;

		public String getK999a() {
			return this.k999a;
		}

		public Integer knokat;

		public Integer getKnokat() {
			return this.knokat;
		}

		public Integer fnkd_lokasi;

		public Integer getFnkd_lokasi() {
			return this.fnkd_lokasi;
		}

		public String fckd_jnskol;

		public String getFckd_jnskol() {
			return this.fckd_jnskol;
		}

		public String fdtgl_input;

		public String getFdtgl_input() {
			return this.fdtgl_input;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String tgl_dtg;

		public String getTgl_dtg() {
			return this.tgl_dtg;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.k999a = readString(dis);

					this.knokat = readInteger(dis);

					this.fnkd_lokasi = readInteger(dis);

					this.fckd_jnskol = readString(dis);

					this.fdtgl_input = readString(dis);

					this.status = readString(dis);

					this.tgl_dtg = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.k999a, dos);

				// Integer

				writeInteger(this.knokat, dos);

				// Integer

				writeInteger(this.fnkd_lokasi, dos);

				// String

				writeString(this.fckd_jnskol, dos);

				// String

				writeString(this.fdtgl_input, dos);

				// String

				writeString(this.status, dos);

				// String

				writeString(this.tgl_dtg, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("k999a=" + k999a);
			sb.append(",knokat=" + String.valueOf(knokat));
			sb.append(",fnkd_lokasi=" + String.valueOf(fnkd_lokasi));
			sb.append(",fckd_jnskol=" + fckd_jnskol);
			sb.append(",fdtgl_input=" + fdtgl_input);
			sb.append(",status=" + status);
			sb.append(",tgl_dtg=" + tgl_dtg);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row8 = 0;

				class BytesLimit65535_tAdvancedHash_row8 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row8().limitLog4jByte();

				// connection name:row8
				// source node:tJavaRow_2 - inputs:(row4) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_2 -
				// inputs:(row6,row8,row10,row12,row11,row15,row16)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				class BytesLimit65535_tJavaRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_2().limitLog4jByte();

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				class BytesLimit65535_tDBInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_2().limitLog4jByte();

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "select * from buku";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row4.k999a = null;
						} else {

							row4.k999a = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row4.knokat = null;
						} else {

							if (rs_tDBInput_2.getObject(2) != null) {
								row4.knokat = rs_tDBInput_2.getInt(2);
							} else {
								row4.knokat = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row4.fnkd_lokasi = null;
						} else {

							if (rs_tDBInput_2.getObject(3) != null) {
								row4.fnkd_lokasi = rs_tDBInput_2.getInt(3);
							} else {
								row4.fnkd_lokasi = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row4.fckd_jnskol = null;
						} else {

							row4.fckd_jnskol = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row4.fdtgl_input = null;
						} else {

							row4.fdtgl_input = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row4.status = null;
						} else {

							row4.status = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row4.tgl_dtg = null;
						} else {

							row4.tgl_dtg = routines.system.JDBCUtil.getString(
									rs_tDBInput_2, 7, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						row8.k999a = row4.k999a;
						row8.knokat = row4.knokat;
						row8.fnkd_lokasi = row4.fnkd_lokasi;

						row8.fckd_jnskol = data_checker
								.computeKoleksi(row4.fckd_jnskol);
						row8.status = data_checker.computeStatus(row4.status);
						row8.fdtgl_input = data_checker
								.computeDate(row4.fdtgl_input);
						row8.tgl_dtg = data_checker.computeDate(row4.tgl_dtg);

						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.k999a = row8.k999a;

						row8_HashRow.knokat = row8.knokat;

						row8_HashRow.fnkd_lokasi = row8.fnkd_lokasi;

						row8_HashRow.fckd_jnskol = row8.fckd_jnskol;

						row8_HashRow.fdtgl_input = row8.fdtgl_input;

						row8_HashRow.status = row8.status;

						row8_HashRow.tgl_dtg = row8.tgl_dtg;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_end ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					stmt_tDBInput_2.close();

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer knokat;

		public Integer getKnokat() {
			return this.knokat;
		}

		public Integer k099a;

		public Integer getK099a() {
			return this.k099a;
		}

		public String k099b;

		public String getK099b() {
			return this.k099b;
		}

		public String k099c;

		public String getK099c() {
			return this.k099c;
		}

		public Integer fnkd_jnstbt;

		public Integer getFnkd_jnstbt() {
			return this.fnkd_jnstbt;
		}

		public String k245a;

		public String getK245a() {
			return this.k245a;
		}

		public Integer fnkd_penerbit;

		public Integer getFnkd_penerbit() {
			return this.fnkd_penerbit;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.knokat == null) ? 0 : this.knokat.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.knokat == null) {
				if (other.knokat != null)
					return false;

			} else if (!this.knokat.equals(other.knokat))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.knokat = this.knokat;
			other.k099a = this.k099a;
			other.k099b = this.k099b;
			other.k099c = this.k099c;
			other.fnkd_jnstbt = this.fnkd_jnstbt;
			other.k245a = this.k245a;
			other.fnkd_penerbit = this.fnkd_penerbit;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.knokat = this.knokat;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.knokat = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.knokat, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.k099a = readInteger(dis, ois);

				this.k099b = readString(dis, ois);

				this.k099c = readString(dis, ois);

				this.fnkd_jnstbt = readInteger(dis, ois);

				this.k245a = readString(dis, ois);

				this.fnkd_penerbit = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.k099a, dos, oos);

				writeString(this.k099b, dos, oos);

				writeString(this.k099c, dos, oos);

				writeInteger(this.fnkd_jnstbt, dos, oos);

				writeString(this.k245a, dos, oos);

				writeInteger(this.fnkd_penerbit, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("knokat=" + String.valueOf(knokat));
			sb.append(",k099a=" + String.valueOf(k099a));
			sb.append(",k099b=" + k099b);
			sb.append(",k099c=" + k099c);
			sb.append(",fnkd_jnstbt=" + String.valueOf(fnkd_jnstbt));
			sb.append(",k245a=" + k245a);
			sb.append(",fnkd_penerbit=" + String.valueOf(fnkd_penerbit));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.knokat, other.knokat);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public Integer knokat;

		public Integer getKnokat() {
			return this.knokat;
		}

		public String k099a;

		public String getK099a() {
			return this.k099a;
		}

		public String k099b;

		public String getK099b() {
			return this.k099b;
		}

		public String k099c;

		public String getK099c() {
			return this.k099c;
		}

		public Integer fnkd_jnstbt;

		public Integer getFnkd_jnstbt() {
			return this.fnkd_jnstbt;
		}

		public String k245a;

		public String getK245a() {
			return this.k245a;
		}

		public String fnkd_penerbit;

		public String getFnkd_penerbit() {
			return this.fnkd_penerbit;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.knokat = readInteger(dis);

					this.k099a = readString(dis);

					this.k099b = readString(dis);

					this.k099c = readString(dis);

					this.fnkd_jnstbt = readInteger(dis);

					this.k245a = readString(dis);

					this.fnkd_penerbit = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.knokat, dos);

				// String

				writeString(this.k099a, dos);

				// String

				writeString(this.k099b, dos);

				// String

				writeString(this.k099c, dos);

				// Integer

				writeInteger(this.fnkd_jnstbt, dos);

				// String

				writeString(this.k245a, dos);

				// String

				writeString(this.fnkd_penerbit, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("knokat=" + String.valueOf(knokat));
			sb.append(",k099a=" + k099a);
			sb.append(",k099b=" + k099b);
			sb.append(",k099c=" + k099c);
			sb.append(",fnkd_jnstbt=" + String.valueOf(fnkd_jnstbt));
			sb.append(",k245a=" + k245a);
			sb.append(",fnkd_penerbit=" + fnkd_penerbit);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row10 = 0;

				class BytesLimit65535_tAdvancedHash_row10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row10().limitLog4jByte();

				// connection name:row10
				// source node:tJavaRow_3 - inputs:(row5) outputs:(row10,row10)
				// | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_2 -
				// inputs:(row6,row8,row10,row12,row11,row15,row16)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_3 = 0;

				class BytesLimit65535_tJavaRow_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_3().limitLog4jByte();

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				class BytesLimit65535_tDBInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_3().limitLog4jByte();

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "select * from judul";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row5.knokat = null;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row5.knokat = rs_tDBInput_3.getInt(1);
							} else {
								row5.knokat = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row5.k099a = null;
						} else {

							row5.k099a = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row5.k099b = null;
						} else {

							row5.k099b = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row5.k099c = null;
						} else {

							row5.k099c = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row5.fnkd_jnstbt = null;
						} else {

							if (rs_tDBInput_3.getObject(5) != null) {
								row5.fnkd_jnstbt = rs_tDBInput_3.getInt(5);
							} else {
								row5.fnkd_jnstbt = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row5.k245a = null;
						} else {

							row5.k245a = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row5.fnkd_penerbit = null;
						} else {

							row5.fnkd_penerbit = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 7, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_3 main ] start
						 */

						currentComponent = "tJavaRow_3";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						row10.knokat = row5.knokat;
						row10.fnkd_jnstbt = row5.fnkd_jnstbt;
						row10.k245a = row5.k245a;

						row10.fnkd_penerbit = data_checker
								.computePenerbitInt(row5.fnkd_penerbit);
						row10.k099a = data_checker.computeKategori(row5.k099a);

						nb_line_tJavaRow_3++;

						tos_count_tJavaRow_3++;

						/**
						 * [tJavaRow_3 main ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row10 main ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						// row10
						// row10

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId,
									1, 1);
						}

						row10Struct row10_HashRow = new row10Struct();

						row10_HashRow.knokat = row10.knokat;

						row10_HashRow.k099a = row10.k099a;

						row10_HashRow.k099b = row10.k099b;

						row10_HashRow.k099c = row10.k099c;

						row10_HashRow.fnkd_jnstbt = row10.fnkd_jnstbt;

						row10_HashRow.k245a = row10.k245a;

						row10_HashRow.fnkd_penerbit = row10.fnkd_penerbit;

						tHash_Lookup_row10.put(row10_HashRow);

						tos_count_tAdvancedHash_row10++;

						/**
						 * [tAdvancedHash_row10 main ] stop
						 */

						/**
						 * [tAdvancedHash_row10 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						/**
						 * [tAdvancedHash_row10 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row10 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						/**
						 * [tAdvancedHash_row10 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_end ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					stmt_tDBInput_3.close();

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String fckd_jnskol;

		public String getFckd_jnskol() {
			return this.fckd_jnskol;
		}

		public String k099l;

		public String getK099l() {
			return this.k099l;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.fckd_jnskol == null) ? 0 : this.fckd_jnskol
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.fckd_jnskol == null) {
				if (other.fckd_jnskol != null)
					return false;

			} else if (!this.fckd_jnskol.equals(other.fckd_jnskol))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.fckd_jnskol = this.fckd_jnskol;
			other.k099l = this.k099l;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.fckd_jnskol = this.fckd_jnskol;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.fckd_jnskol = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fckd_jnskol, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.k099l = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.k099l, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fckd_jnskol=" + fckd_jnskol);
			sb.append(",k099l=" + k099l);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.fckd_jnskol,
					other.fckd_jnskol);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String fckd_jnskol;

		public String getFckd_jnskol() {
			return this.fckd_jnskol;
		}

		public String k099l;

		public String getK099l() {
			return this.k099l;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.fckd_jnskol == null) ? 0 : this.fckd_jnskol
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.fckd_jnskol == null) {
				if (other.fckd_jnskol != null)
					return false;

			} else if (!this.fckd_jnskol.equals(other.fckd_jnskol))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.fckd_jnskol = this.fckd_jnskol;
			other.k099l = this.k099l;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.fckd_jnskol = this.fckd_jnskol;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.fckd_jnskol = readString(dis);

					this.k099l = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fckd_jnskol, dos);

				// String

				writeString(this.k099l, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fckd_jnskol=" + fckd_jnskol);
			sb.append(",k099l=" + k099l);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.fckd_jnskol,
					other.fckd_jnskol);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public String fckd_jnskol;

		public String getFckd_jnskol() {
			return this.fckd_jnskol;
		}

		public String k099l;

		public String getK099l() {
			return this.k099l;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.fckd_jnskol = readString(dis);

					this.k099l = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fckd_jnskol, dos);

				// String

				writeString(this.k099l, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fckd_jnskol=" + fckd_jnskol);
			sb.append(",k099l=" + k099l);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				row9Struct row9 = new row9Struct();

				row12Struct row12 = new row12Struct();

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row12";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row12 = 0;

				class BytesLimit65535_tAdvancedHash_row12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row12().limitLog4jByte();

				// connection name:row12
				// source node:tUnite_2 - inputs:(row7,row9)
				// outputs:(row12,row12) | target node:tAdvancedHash_row12 -
				// inputs:(row12) outputs:()
				// linked node: tMap_2 -
				// inputs:(row6,row8,row10,row12,row11,row15,row16)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct> getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tUnite_2 = 0;

				class BytesLimit65535_tUnite_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUnite_2().limitLog4jByte();

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				class BytesLimit65535_tDBInput_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDBInput_4().limitLog4jByte();

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "select * from koleksi";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row7.fckd_jnskol = null;
						} else {

							row7.fckd_jnskol = routines.system.JDBCUtil
									.getString(rs_tDBInput_4, 1, false);
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row7.k099l = null;
						} else {

							row7.k099l = routines.system.JDBCUtil.getString(
									rs_tDBInput_4, 2, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tUnite_2 main ] start
						 */

						currentComponent = "tUnite_2";

						// row9
						// row7

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						// ////////

						// for output
						row12 = new row12Struct();

						row12.fckd_jnskol = row7.fckd_jnskol;
						row12.k099l = row7.k099l;

						nb_line_tUnite_2++;

						// ////////

						tos_count_tUnite_2++;

						/**
						 * [tUnite_2 main ] stop
						 */

						/**
						 * [tUnite_2 process_data_begin ] start
						 */

						currentComponent = "tUnite_2";

						/**
						 * [tUnite_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row12 main ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						// row12
						// row12

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId,
									1, 1);
						}

						row12Struct row12_HashRow = new row12Struct();

						row12_HashRow.fckd_jnskol = row12.fckd_jnskol;

						row12_HashRow.k099l = row12.k099l;

						tHash_Lookup_row12.put(row12_HashRow);

						tos_count_tAdvancedHash_row12++;

						/**
						 * [tAdvancedHash_row12 main ] stop
						 */

						/**
						 * [tAdvancedHash_row12 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						/**
						 * [tAdvancedHash_row12 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row12 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						/**
						 * [tAdvancedHash_row12 process_data_end ] stop
						 */

						/**
						 * [tUnite_2 process_data_end ] start
						 */

						currentComponent = "tUnite_2";

						/**
						 * [tUnite_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					stmt_tDBInput_4.close();

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				class BytesLimit65535_tFixedFlowInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_2().limitLog4jByte();

				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {

					row9.fckd_jnskol = "none";

					row9.k099l = "none";

					/**
					 * [tFixedFlowInput_2 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_2 main ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					tos_count_tFixedFlowInput_2++;

					/**
					 * [tFixedFlowInput_2 main ] stop
					 */

					/**
					 * [tFixedFlowInput_2 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					/**
					 * [tFixedFlowInput_2 process_data_begin ] stop
					 */

					/**
					 * [tUnite_2 main ] start
					 */

					currentComponent = "tUnite_2";

					// row9
					// row9

					if (execStat) {
						runStat.updateStatOnConnection("row9" + iterateId, 1, 1);
					}

					// row7
					// row9

					// ////////

					// for output
					row12 = new row12Struct();

					row12.fckd_jnskol = row9.fckd_jnskol;
					row12.k099l = row9.k099l;

					nb_line_tUnite_2++;

					// ////////

					tos_count_tUnite_2++;

					/**
					 * [tUnite_2 main ] stop
					 */

					/**
					 * [tUnite_2 process_data_begin ] start
					 */

					currentComponent = "tUnite_2";

					/**
					 * [tUnite_2 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row12 main ] start
					 */

					currentComponent = "tAdvancedHash_row12";

					// row12
					// row12

					if (execStat) {
						runStat.updateStatOnConnection("row12" + iterateId, 1,
								1);
					}

					row12Struct row12_HashRow = new row12Struct();

					row12_HashRow.fckd_jnskol = row12.fckd_jnskol;

					row12_HashRow.k099l = row12.k099l;

					tHash_Lookup_row12.put(row12_HashRow);

					tos_count_tAdvancedHash_row12++;

					/**
					 * [tAdvancedHash_row12 main ] stop
					 */

					/**
					 * [tAdvancedHash_row12 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row12";

					/**
					 * [tAdvancedHash_row12 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row12 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row12";

					/**
					 * [tAdvancedHash_row12 process_data_end ] stop
					 */

					/**
					 * [tUnite_2 process_data_end ] start
					 */

					currentComponent = "tUnite_2";

					/**
					 * [tUnite_2 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_2 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					/**
					 * [tFixedFlowInput_2 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_2 end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

				}
				globalMap.put("tFixedFlowInput_2_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row12 finally ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				/**
				 * [tAdvancedHash_row12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int kode_jurusan;

		public int getKode_jurusan() {
			return this.kode_jurusan;
		}

		public String nama_jurusan;

		public String getNama_jurusan() {
			return this.nama_jurusan;
		}

		public String fakultas;

		public String getFakultas() {
			return this.fakultas;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.kode_jurusan;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.kode_jurusan != other.kode_jurusan)
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.kode_jurusan = this.kode_jurusan;
			other.nama_jurusan = this.nama_jurusan;
			other.fakultas = this.fakultas;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.kode_jurusan = this.kode_jurusan;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.kode_jurusan = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.kode_jurusan);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nama_jurusan = readString(dis, ois);

				this.fakultas = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.nama_jurusan, dos, oos);

				writeString(this.fakultas, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kode_jurusan=" + String.valueOf(kode_jurusan));
			sb.append(",nama_jurusan=" + nama_jurusan);
			sb.append(",fakultas=" + fakultas);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.kode_jurusan,
					other.kode_jurusan);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public int kode_jurusan;

		public int getKode_jurusan() {
			return this.kode_jurusan;
		}

		public String nama_jurusan;

		public String getNama_jurusan() {
			return this.nama_jurusan;
		}

		public String fakultas;

		public String getFakultas() {
			return this.fakultas;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.kode_jurusan = dis.readInt();

					this.nama_jurusan = readString(dis);

					this.fakultas = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.kode_jurusan);

				// String

				writeString(this.nama_jurusan, dos);

				// String

				writeString(this.fakultas, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kode_jurusan=" + String.valueOf(kode_jurusan));
			sb.append(",nama_jurusan=" + nama_jurusan);
			sb.append(",fakultas=" + fakultas);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public Integer kode_jurusan;

		public Integer getKode_jurusan() {
			return this.kode_jurusan;
		}

		public String nama_jurusan;

		public String getNama_jurusan() {
			return this.nama_jurusan;
		}

		public String fakultas;

		public String getFakultas() {
			return this.fakultas;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.kode_jurusan = readInteger(dis);

					this.nama_jurusan = readString(dis);

					this.fakultas = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.kode_jurusan, dos);

				// String

				writeString(this.nama_jurusan, dos);

				// String

				writeString(this.fakultas, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kode_jurusan=" + String.valueOf(kode_jurusan));
			sb.append(",nama_jurusan=" + nama_jurusan);
			sb.append(",fakultas=" + fakultas);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				row3Struct row3 = new row3Struct();

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row11";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row11 = 0;

				class BytesLimit65535_tAdvancedHash_row11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row11().limitLog4jByte();

				// connection name:row11
				// source node:tUnite_1 - inputs:(row2,row3)
				// outputs:(row11,row11) | target node:tAdvancedHash_row11 -
				// inputs:(row11) outputs:()
				// linked node: tMap_2 -
				// inputs:(row6,row8,row10,row12,row11,row15,row16)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct> getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tUnite_1 = 0;

				class BytesLimit65535_tUnite_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUnite_1().limitLog4jByte();

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "|").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) "|")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				"D:/Apps Installer/TOS_BD-20180411_1414-V7.0.1/workspace/jurusan.csv"/**
				 * 
				 * End field tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 0; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 0; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "|").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) "|")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.kode_jurusan = 0;

								row2.nama_jurusan = null;

								row2.fakultas = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
											.length() > 0) {
										try {

											row2.kode_jurusan = ParserUtils
													.parseTo_int(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1
													.setException(new RuntimeException(
															String.format(
																	"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																	"kode_jurusan",
																	"row2",
																	rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
																	ex_tFileInputDelimited_1),
															ex_tFileInputDelimited_1));
										}
									} else {

										rowstate_tFileInputDelimited_1
												.setException(new RuntimeException(
														"Value is empty for column : 'kode_jurusan' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													"Value is empty for column : 'kode_jurusan' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.nama_jurusan = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row2.nama_jurusan = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.fakultas = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row2.fakultas = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							// row3
							// row2

							// ////////

							// for output
							row11 = new row11Struct();

							row11.kode_jurusan = row2.kode_jurusan;
							row11.nama_jurusan = row2.nama_jurusan;
							row11.fakultas = row2.fakultas;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row11 main ] start
							 */

							currentComponent = "tAdvancedHash_row11";

							// row11
							// row11

							if (execStat) {
								runStat.updateStatOnConnection("row11"
										+ iterateId, 1, 1);
							}

							row11Struct row11_HashRow = new row11Struct();

							row11_HashRow.kode_jurusan = row11.kode_jurusan;

							row11_HashRow.nama_jurusan = row11.nama_jurusan;

							row11_HashRow.fakultas = row11.fakultas;

							tHash_Lookup_row11.put(row11_HashRow);

							tos_count_tAdvancedHash_row11++;

							/**
							 * [tAdvancedHash_row11 main ] stop
							 */

							/**
							 * [tAdvancedHash_row11 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row11";

							/**
							 * [tAdvancedHash_row11 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row11 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row11";

							/**
							 * [tAdvancedHash_row11 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				class BytesLimit65535_tFixedFlowInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

				int nb_line_tFixedFlowInput_1 = 0;
				List<row3Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row3Struct>();
				row3 = new row3Struct();
				row3.kode_jurusan = 0;
				row3.nama_jurusan = "karyawan";
				row3.fakultas = "karyawan";
				cacheList_tFixedFlowInput_1.add(row3);
				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {
					for (row3Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1) {
						nb_line_tFixedFlowInput_1++;
						row3 = tmpRow_tFixedFlowInput_1;

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 process_data_begin ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						/**
						 * [tFixedFlowInput_1 process_data_begin ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// row2
						// row3

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						// ////////

						// for output
						row11 = new row11Struct();

						row11.kode_jurusan = row3.kode_jurusan;
						row11.nama_jurusan = row3.nama_jurusan;
						row11.fakultas = row3.fakultas;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tUnite_1 process_data_begin ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row11 main ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						// row11
						// row11

						if (execStat) {
							runStat.updateStatOnConnection("row11" + iterateId,
									1, 1);
						}

						row11Struct row11_HashRow = new row11Struct();

						row11_HashRow.kode_jurusan = row11.kode_jurusan;

						row11_HashRow.nama_jurusan = row11.nama_jurusan;

						row11_HashRow.fakultas = row11.fakultas;

						tHash_Lookup_row11.put(row11_HashRow);

						tos_count_tAdvancedHash_row11++;

						/**
						 * [tAdvancedHash_row11 main ] stop
						 */

						/**
						 * [tAdvancedHash_row11 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						/**
						 * [tAdvancedHash_row11 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row11 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row11";

						/**
						 * [tAdvancedHash_row11 process_data_end ] stop
						 */

						/**
						 * [tUnite_1 process_data_end ] start
						 */

						currentComponent = "tUnite_1";

						/**
						 * [tUnite_1 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_1 process_data_end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						/**
						 * [tFixedFlowInput_1 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
				}
				cacheList_tFixedFlowInput_1.clear();
				globalMap.put("tFixedFlowInput_1_NB_LINE",
						nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row11 finally ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				/**
				 * [tAdvancedHash_row11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer kode_kategori;

		public Integer getKode_kategori() {
			return this.kode_kategori;
		}

		public String nama_kategori;

		public String getNama_kategori() {
			return this.nama_kategori;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.kode_kategori == null) ? 0
								: this.kode_kategori.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.kode_kategori == null) {
				if (other.kode_kategori != null)
					return false;

			} else if (!this.kode_kategori.equals(other.kode_kategori))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.kode_kategori = this.kode_kategori;
			other.nama_kategori = this.nama_kategori;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.kode_kategori = this.kode_kategori;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.kode_kategori = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.kode_kategori, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.nama_kategori = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.nama_kategori, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kode_kategori=" + String.valueOf(kode_kategori));
			sb.append(",nama_kategori=" + nama_kategori);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.kode_kategori,
					other.kode_kategori);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public Integer kode_kategori;

		public Integer getKode_kategori() {
			return this.kode_kategori;
		}

		public String nama_kategori;

		public String getNama_kategori() {
			return this.nama_kategori;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.kode_kategori = readInteger(dis);

					this.nama_kategori = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.kode_kategori, dos);

				// String

				writeString(this.nama_kategori, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kode_kategori=" + String.valueOf(kode_kategori));
			sb.append(",nama_kategori=" + nama_kategori);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];

		public Integer kode_kategori;

		public Integer getKode_kategori() {
			return this.kode_kategori;
		}

		public String nama_kategori;

		public String getNama_kategori() {
			return this.nama_kategori;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.kode_kategori = readInteger(dis);

					this.nama_kategori = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.kode_kategori, dos);

				// String

				writeString(this.nama_kategori, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kode_kategori=" + String.valueOf(kode_kategori));
			sb.append(",nama_kategori=" + nama_kategori);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				row14Struct row14 = new row14Struct();

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row15" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row15 = 0;

				class BytesLimit65535_tAdvancedHash_row15 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row15().limitLog4jByte();

				// connection name:row15
				// source node:tUnite_3 - inputs:(row13,row14)
				// outputs:(row15,row15) | target node:tAdvancedHash_row15 -
				// inputs:(row15) outputs:()
				// linked node: tMap_2 -
				// inputs:(row6,row8,row10,row12,row11,row15,row16)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tUnite_3 begin ] start
				 */

				ok_Hash.put("tUnite_3", false);
				start_Hash.put("tUnite_3", System.currentTimeMillis());

				currentComponent = "tUnite_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row14" + iterateId, 0,
								0);

					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tUnite_3 = 0;

				class BytesLimit65535_tUnite_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tUnite_3().limitLog4jByte();

				int nb_line_tUnite_3 = 0;

				/**
				 * [tUnite_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				class BytesLimit65535_tFileInputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				"D:/Apps Installer/TOS_BD-20180411_1414-V7.0.1/workspace/kategori.csv"/**
				 * 
				 * End field tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 0; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 0; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row13 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row13 = new row13Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row13.kode_kategori = null;

								row13.nama_kategori = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]
											.length() > 0) {
										try {

											row13.kode_kategori = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2
													.setException(new RuntimeException(
															String.format(
																	"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																	"kode_kategori",
																	"row13",
																	rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
																	ex_tFileInputDelimited_2),
															ex_tFileInputDelimited_2));
										}
									} else {

										row13.kode_kategori = null;

									}

								} else {

									row13.kode_kategori = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row13.nama_kategori = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row13.nama_kategori = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tUnite_3 main ] start
							 */

							currentComponent = "tUnite_3";

							// row14
							// row13

							// row13
							// row13

							if (execStat) {
								runStat.updateStatOnConnection("row13"
										+ iterateId, 1, 1);
							}

							// ////////

							// for output
							row15 = new row15Struct();

							row15.kode_kategori = row13.kode_kategori;
							row15.nama_kategori = row13.nama_kategori;

							nb_line_tUnite_3++;

							// ////////

							tos_count_tUnite_3++;

							/**
							 * [tUnite_3 main ] stop
							 */

							/**
							 * [tUnite_3 process_data_begin ] start
							 */

							currentComponent = "tUnite_3";

							/**
							 * [tUnite_3 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row15 main ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							// row15
							// row15

							if (execStat) {
								runStat.updateStatOnConnection("row15"
										+ iterateId, 1, 1);
							}

							row15Struct row15_HashRow = new row15Struct();

							row15_HashRow.kode_kategori = row15.kode_kategori;

							row15_HashRow.nama_kategori = row15.nama_kategori;

							tHash_Lookup_row15.put(row15_HashRow);

							tos_count_tAdvancedHash_row15++;

							/**
							 * [tAdvancedHash_row15 main ] stop
							 */

							/**
							 * [tAdvancedHash_row15 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							/**
							 * [tAdvancedHash_row15 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row15 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							/**
							 * [tAdvancedHash_row15 process_data_end ] stop
							 */

							/**
							 * [tUnite_3 process_data_end ] start
							 */

							currentComponent = "tUnite_3";

							/**
							 * [tUnite_3 process_data_end ] stop
							 */

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tFixedFlowInput_3 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_3", false);
				start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_3";

				int tos_count_tFixedFlowInput_3 = 0;

				class BytesLimit65535_tFixedFlowInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_3().limitLog4jByte();

				for (int i_tFixedFlowInput_3 = 0; i_tFixedFlowInput_3 < 1; i_tFixedFlowInput_3++) {

					row14.kode_kategori = 0;

					row14.nama_kategori = "unknown";

					/**
					 * [tFixedFlowInput_3 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_3 main ] start
					 */

					currentComponent = "tFixedFlowInput_3";

					tos_count_tFixedFlowInput_3++;

					/**
					 * [tFixedFlowInput_3 main ] stop
					 */

					/**
					 * [tFixedFlowInput_3 process_data_begin ] start
					 */

					currentComponent = "tFixedFlowInput_3";

					/**
					 * [tFixedFlowInput_3 process_data_begin ] stop
					 */

					/**
					 * [tUnite_3 main ] start
					 */

					currentComponent = "tUnite_3";

					// row14
					// row14

					if (execStat) {
						runStat.updateStatOnConnection("row14" + iterateId, 1,
								1);
					}

					// row13
					// row14

					// ////////

					// for output
					row15 = new row15Struct();

					row15.kode_kategori = row14.kode_kategori;
					row15.nama_kategori = row14.nama_kategori;

					nb_line_tUnite_3++;

					// ////////

					tos_count_tUnite_3++;

					/**
					 * [tUnite_3 main ] stop
					 */

					/**
					 * [tUnite_3 process_data_begin ] start
					 */

					currentComponent = "tUnite_3";

					/**
					 * [tUnite_3 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row15 main ] start
					 */

					currentComponent = "tAdvancedHash_row15";

					// row15
					// row15

					if (execStat) {
						runStat.updateStatOnConnection("row15" + iterateId, 1,
								1);
					}

					row15Struct row15_HashRow = new row15Struct();

					row15_HashRow.kode_kategori = row15.kode_kategori;

					row15_HashRow.nama_kategori = row15.nama_kategori;

					tHash_Lookup_row15.put(row15_HashRow);

					tos_count_tAdvancedHash_row15++;

					/**
					 * [tAdvancedHash_row15 main ] stop
					 */

					/**
					 * [tAdvancedHash_row15 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row15";

					/**
					 * [tAdvancedHash_row15 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row15 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row15";

					/**
					 * [tAdvancedHash_row15 process_data_end ] stop
					 */

					/**
					 * [tUnite_3 process_data_end ] start
					 */

					currentComponent = "tUnite_3";

					/**
					 * [tUnite_3 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_3 process_data_end ] start
					 */

					currentComponent = "tFixedFlowInput_3";

					/**
					 * [tFixedFlowInput_3 process_data_end ] stop
					 */

					/**
					 * [tFixedFlowInput_3 end ] start
					 */

					currentComponent = "tFixedFlowInput_3";

				}
				globalMap.put("tFixedFlowInput_3_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_3", true);
				end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_3 end ] stop
				 */

				/**
				 * [tUnite_3 end ] start
				 */

				currentComponent = "tUnite_3";

				globalMap.put("tUnite_3_NB_LINE", nb_line_tUnite_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row14" + iterateId, 2,
								0);
					}
				}

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tUnite_3", true);
				end_Hash.put("tUnite_3", System.currentTimeMillis());

				/**
				 * [tUnite_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row15" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tFixedFlowInput_3 finally ] start
				 */

				currentComponent = "tFixedFlowInput_3";

				/**
				 * [tFixedFlowInput_3 finally ] stop
				 */

				/**
				 * [tUnite_3 finally ] start
				 */

				currentComponent = "tUnite_3";

				/**
				 * [tUnite_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		static byte[] commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String kode_kondisi;

		public String getKode_kondisi() {
			return this.kode_kondisi;
		}

		public String kondisi;

		public String getKondisi() {
			return this.kondisi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.kode_kondisi == null) ? 0 : this.kode_kondisi
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.kode_kondisi == null) {
				if (other.kode_kondisi != null)
					return false;

			} else if (!this.kode_kondisi.equals(other.kode_kondisi))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.kode_kondisi = this.kode_kondisi;
			other.kondisi = this.kondisi;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.kode_kondisi = this.kode_kondisi;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori.length == 0) {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length);
				strReturn = new String(
						commonByteArray_SKRIPSI_cf_transaksi_jurusan_kategori,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_cf_transaksi_jurusan_kategori) {

				try {

					int length = 0;

					this.kode_kondisi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.kode_kondisi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.kondisi = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.kondisi, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kode_kondisi=" + kode_kondisi);
			sb.append(",kondisi=" + kondisi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.kode_kondisi,
					other.kode_kondisi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row16" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row16 = 0;

				class BytesLimit65535_tAdvancedHash_row16 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row16().limitLog4jByte();

				// connection name:row16
				// source node:tFileInputDelimited_3 - inputs:(after_tDBInput_1)
				// outputs:(row16,row16) | target node:tAdvancedHash_row16 -
				// inputs:(row16) outputs:()
				// linked node: tMap_2 -
				// inputs:(row6,row8,row10,row12,row11,row15,row16)
				// outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct> getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				class BytesLimit65535_tFileInputDelimited_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				"D:/Apps Installer/TOS_BD-20180411_1414-V7.0.1/workspace/kondisi_buku.csv"/**
				 * 
				 * End field tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 0; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 0; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row16 = null;

						row16 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row16 = new row16Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row16.kode_kondisi = null;

								row16.kondisi = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.kode_kondisi = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row16.kode_kondisi = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.kondisi = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row16.kondisi = null;

								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
						// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tAdvancedHash_row16 main ] start
							 */

							currentComponent = "tAdvancedHash_row16";

							// row16
							// row16

							if (execStat) {
								runStat.updateStatOnConnection("row16"
										+ iterateId, 1, 1);
							}

							row16Struct row16_HashRow = new row16Struct();

							row16_HashRow.kode_kondisi = row16.kode_kondisi;

							row16_HashRow.kondisi = row16.kondisi;

							tHash_Lookup_row16.put(row16_HashRow);

							tos_count_tAdvancedHash_row16++;

							/**
							 * [tAdvancedHash_row16 main ] stop
							 */

							/**
							 * [tAdvancedHash_row16 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row16";

							/**
							 * [tAdvancedHash_row16 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row16 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row16";

							/**
							 * [tAdvancedHash_row16 process_data_end ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row16" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				class BytesLimit65535_tJava_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_1().limitLog4jByte();

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tCassandraConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final cf_transaksi_jurusan_kategori cf_transaksi_jurusan_kategoriClass = new cf_transaksi_jurusan_kategori();

		int exitCode = cf_transaksi_jurusan_kategoriClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = cf_transaksi_jurusan_kategori.class
					.getClassLoader().getResourceAsStream(
							"skripsi/cf_transaksi_jurusan_kategori_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = cf_transaksi_jurusan_kategori.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : cf_transaksi_jurusan_kategori");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
		closeCassandraConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private void closeCassandraConnections() {
		try {
			Object obj_cluster;
			Object obj_conn;
			obj_cluster = globalMap.remove("cluster_tCassandraConnection_1");
			obj_conn = globalMap.remove("connection_tCassandraConnection_1");
			if (obj_conn != null) {
				((com.datastax.driver.core.Session) obj_conn).close();
			}
			if (obj_cluster != null) {
				((com.datastax.driver.core.Cluster) obj_cluster).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));
		connections.put("connection_tCassandraConnection_1",
				globalMap.get("connection_tCassandraConnection_1"));
		connections.put("cluster_tCassandraConnection_1",
				globalMap.get("cluster_tCassandraConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 293231 characters generated by Talend Open Studio for Big Data on the October
 * 13, 2018 12:55:33 PM ICT
 ************************************************************************************************/
