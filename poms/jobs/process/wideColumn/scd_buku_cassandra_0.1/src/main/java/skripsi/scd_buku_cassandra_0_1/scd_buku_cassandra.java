// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package skripsi.scd_buku_cassandra_0_1;

import routines.data_checker;
import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import routines.data_checker.*;
import routines.buku_scd_data;

//the import part of tJavaRow_2
//import java.util.List;
import java.util.Date;

//the import part of tJavaFlex_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: scd_buku_cassandra Purpose: scd_buku_cassandra<br>
 * Description: scd_buku_cassandra <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class scd_buku_cassandra implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "scd_buku_cassandra";
	private final String projectName = "SKRIPSI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					scd_buku_cassandra.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(scd_buku_cassandra.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCassandraConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaFlex_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tCassandraInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCassandraOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCassandraInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tCassandraOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tCassandraInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCassandraConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCassandraInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tCassandraInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				class BytesLimit65535_tJava_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_1().limitLog4jByte();

				ArrayList<String> ids = new ArrayList<String>();

				globalMap.put("ids_array", ids);
				globalMap.put("ids_str", "");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tCassandraConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tCassandraConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCassandraConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tCassandraConnection_1 begin ] start
				 */

				ok_Hash.put("tCassandraConnection_1", false);
				start_Hash.put("tCassandraConnection_1",
						System.currentTimeMillis());

				currentComponent = "tCassandraConnection_1";

				int tos_count_tCassandraConnection_1 = 0;

				class BytesLimit65535_tCassandraConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tCassandraConnection_1().limitLog4jByte();

				/**
				 * [tCassandraConnection_1 begin ] stop
				 */

				/**
				 * [tCassandraConnection_1 main ] start
				 */

				currentComponent = "tCassandraConnection_1";

				com.datastax.driver.core.Cluster cluster_tCassandraConnection_1 = com.datastax.driver.core.Cluster
						.builder()
						.addContactPoints("".split(","))
						.withPort(Integer.valueOf("9042"))

						.withCredentials(
								"cassandra",
								routines.system.PasswordEncryptUtil
										.decryptPassword("553abcc4df382af15a0ab58d844e78f7"))

						.build();

				com.datastax.driver.core.Session connection_tCassandraConnection_1 = null;
				connection_tCassandraConnection_1 = cluster_tCassandraConnection_1
						.connect();
				globalMap.put("cluster_tCassandraConnection_1",
						cluster_tCassandraConnection_1);
				globalMap.put("connection_tCassandraConnection_1",
						connection_tCassandraConnection_1);

				tos_count_tCassandraConnection_1++;

				/**
				 * [tCassandraConnection_1 main ] stop
				 */

				/**
				 * [tCassandraConnection_1 process_data_begin ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tCassandraConnection_1 process_data_end ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 process_data_end ] stop
				 */

				/**
				 * [tCassandraConnection_1 end ] start
				 */

				currentComponent = "tCassandraConnection_1";

				ok_Hash.put("tCassandraConnection_1", true);
				end_Hash.put("tCassandraConnection_1",
						System.currentTimeMillis());

				/**
				 * [tCassandraConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tCassandraConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tCassandraConnection_1 finally ] start
				 */

				currentComponent = "tCassandraConnection_1";

				/**
				 * [tCassandraConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCassandraConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public java.util.Date tanggal_status_ganti;

		public java.util.Date getTanggal_status_ganti() {
			return this.tanggal_status_ganti;
		}

		public String kondisi;

		public String getKondisi() {
			return this.kondisi;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.tanggal_status_ganti = readDate(dis);

					this.kondisi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// java.util.Date

				writeDate(this.tanggal_status_ganti, dos);

				// String

				writeString(this.kondisi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",tanggal_status_ganti="
					+ String.valueOf(tanggal_status_ganti));
			sb.append(",kondisi=" + kondisi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String status_sekarang;

		public String getStatus_sekarang() {
			return this.status_sekarang;
		}

		public java.util.Date tanggal_status_ganti;

		public java.util.Date getTanggal_status_ganti() {
			return this.tanggal_status_ganti;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.status_sekarang = readString(dis);

					this.tanggal_status_ganti = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.status_sekarang, dos);

				// java.util.Date

				writeDate(this.tanggal_status_ganti, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",status_sekarang=" + status_sekarang);
			sb.append(",tanggal_status_ganti="
					+ String.valueOf(tanggal_status_ganti));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String status_sekarang;

		public String getStatus_sekarang() {
			return this.status_sekarang;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.status_sekarang = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.status_sekarang, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",status_sekarang=" + status_sekarang);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String status_sekarang;

		public String getStatus_sekarang() {
			return this.status_sekarang;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.status_sekarang = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.status_sekarang, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",status_sekarang=" + status_sekarang);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				row5Struct row5 = new row5Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				currentComponent = "tJavaFlex_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaFlex_1 = 0;

				class BytesLimit65535_tJavaFlex_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaFlex_1().limitLog4jByte();

				/**
				 * [tJavaFlex_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				class BytesLimit65535_tJavaRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_2().limitLog4jByte();

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				"D:/Apps Installer/TOS_BD-20180411_1414-V7.0.1/workspace/scd.csv"/**
				 * 
				 * End field tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 0; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 0; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.key = null;

								row1.status_sekarang = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.key = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.key = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.status_sekarang = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.status_sekarang = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							row5.key = row1.key;
							row5.status_sekarang = data_checker
									.computeStatus(row1.status_sekarang);
							row5.tanggal_status_ganti = new Date();

							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tJavaRow_2 process_data_begin ] start
							 */

							currentComponent = "tJavaRow_2";

							/**
							 * [tJavaRow_2 process_data_begin ] stop
							 */

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row5
							// row5

							if (execStat) {
								runStat.updateStatOnConnection("row5"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row4"
							// /////////////////////////////////////////////

							boolean forceLooprow4 = false;

							row4Struct row4ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row4HashKey.kode_kondisi = row5.status_sekarang;

								row4HashKey.hashCodeDirty = true;

								tHash_Lookup_row4.lookup(row4HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row4 != null
									&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.kode_kondisi = '"
								// + row4HashKey.kode_kondisi + "'");
							} // G 071

							row4Struct row4 = null;

							row4Struct fromLookup_row4 = null;
							row4 = row4Default;

							if (tHash_Lookup_row4 != null
									&& tHash_Lookup_row4.hasNext()) { // G 099

								fromLookup_row4 = tHash_Lookup_row4.next();

							} // G 099

							if (fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

								// # Output table : 'out1'
								out1_tmp.key = row5.key;
								out1_tmp.tanggal_status_ganti = row5.tanggal_status_ganti;
								out1_tmp.kondisi = row4.kondisi;
								out1 = out1_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
							// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tJavaFlex_1 main ] start
								 */

								currentComponent = "tJavaFlex_1";

								// out1
								// out1

								if (execStat) {
									runStat.updateStatOnConnection("out1"
											+ iterateId, 1, 1);
								}

								/*
								 * toBeUpdated.add(new buku_scd_data(
								 * out1.key,out1
								 * .kondisi,out1.tanggal_status_ganti ));
								 */
								((ArrayList<String>) globalMap.get("ids_array"))
										.add(out1.key);
								globalMap.put(out1.key, new buku_scd_data(
										out1.key, out1.kondisi,
										out1.tanggal_status_ganti));

								tos_count_tJavaFlex_1++;

								/**
								 * [tJavaFlex_1 main ] stop
								 */

								/**
								 * [tJavaFlex_1 process_data_begin ] start
								 */

								currentComponent = "tJavaFlex_1";

								/**
								 * [tJavaFlex_1 process_data_begin ] stop
								 */

								/**
								 * [tJavaFlex_1 process_data_end ] start
								 */

								currentComponent = "tJavaFlex_1";

								/**
								 * [tJavaFlex_1 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

							/**
							 * [tJavaRow_2 process_data_end ] start
							 */

							currentComponent = "tJavaRow_2";

							/**
							 * [tJavaRow_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tJavaFlex_1 end ] start
				 */

				currentComponent = "tJavaFlex_1";

				ArrayList<String> new_ids_array = new ArrayList<String>();
				for (String s : (ArrayList<String>) globalMap.get("ids_array")) {
					new_ids_array.add("'" + s + "'");
				}

				globalMap.put("ids_str", String.join(",", new_ids_array));
				System.out.println(globalMap.get("ids_str"));

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tCassandraInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tJavaFlex_1 finally ] start
				 */

				currentComponent = "tJavaFlex_1";

				/**
				 * [tJavaFlex_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];

		public String unique_id;

		public String getUnique_id() {
			return this.unique_id;
		}

		public String status_sekarang;

		public String getStatus_sekarang() {
			return this.status_sekarang;
		}

		public String status_lama;

		public String getStatus_lama() {
			return this.status_lama;
		}

		public java.util.Date tanggal_status_ganti;

		public java.util.Date getTanggal_status_ganti() {
			return this.tanggal_status_ganti;
		}

		public java.util.Date tanggal_datang;

		public java.util.Date getTanggal_datang() {
			return this.tanggal_datang;
		}

		public java.util.Date tanggal_input;

		public java.util.Date getTanggal_input() {
			return this.tanggal_input;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.unique_id = readString(dis);

					this.status_sekarang = readString(dis);

					this.status_lama = readString(dis);

					this.tanggal_status_ganti = readDate(dis);

					this.tanggal_datang = readDate(dis);

					this.tanggal_input = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.unique_id, dos);

				// String

				writeString(this.status_sekarang, dos);

				// String

				writeString(this.status_lama, dos);

				// java.util.Date

				writeDate(this.tanggal_status_ganti, dos);

				// java.util.Date

				writeDate(this.tanggal_datang, dos);

				// java.util.Date

				writeDate(this.tanggal_input, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("unique_id=" + unique_id);
			sb.append(",status_sekarang=" + status_sekarang);
			sb.append(",status_lama=" + status_lama);
			sb.append(",tanggal_status_ganti="
					+ String.valueOf(tanggal_status_ganti));
			sb.append(",tanggal_datang=" + String.valueOf(tanggal_datang));
			sb.append(",tanggal_input=" + String.valueOf(tanggal_input));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];

		public String unique_id;

		public String getUnique_id() {
			return this.unique_id;
		}

		public String status_sekarang;

		public String getStatus_sekarang() {
			return this.status_sekarang;
		}

		public java.util.Date tanggal_datang;

		public java.util.Date getTanggal_datang() {
			return this.tanggal_datang;
		}

		public java.util.Date tanggal_input;

		public java.util.Date getTanggal_input() {
			return this.tanggal_input;
		}

		public String kode_buku;

		public String getKode_buku() {
			return this.kode_buku;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.unique_id = readString(dis);

					this.status_sekarang = readString(dis);

					this.tanggal_datang = readDate(dis);

					this.tanggal_input = readDate(dis);

					this.kode_buku = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.unique_id, dos);

				// String

				writeString(this.status_sekarang, dos);

				// java.util.Date

				writeDate(this.tanggal_datang, dos);

				// java.util.Date

				writeDate(this.tanggal_input, dos);

				// String

				writeString(this.kode_buku, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("unique_id=" + unique_id);
			sb.append(",status_sekarang=" + status_sekarang);
			sb.append(",tanggal_datang=" + String.valueOf(tanggal_datang));
			sb.append(",tanggal_input=" + String.valueOf(tanggal_input));
			sb.append(",kode_buku=" + kode_buku);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tCassandraInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCassandraInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tCassandraOutput_1 begin ] start
				 */

				ok_Hash.put("tCassandraOutput_1", false);
				start_Hash
						.put("tCassandraOutput_1", System.currentTimeMillis());

				currentComponent = "tCassandraOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tCassandraOutput_1 = 0;

				class BytesLimit65535_tCassandraOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tCassandraOutput_1().limitLog4jByte();

				com.datastax.driver.core.Cluster cluster_tCassandraOutput_1 = (com.datastax.driver.core.Cluster) globalMap
						.get("cluster_tCassandraConnection_1");
				com.datastax.driver.core.Session connection_tCassandraOutput_1 = (com.datastax.driver.core.Session) globalMap
						.get("connection_tCassandraConnection_1");

				int nb_line_tCassandraOutput_1 = 0;
				com.datastax.driver.core.PreparedStatement prepareStmt_tCassandraOutput_1 = null;
				prepareStmt_tCassandraOutput_1 = connection_tCassandraOutput_1
						.prepare("INSERT INTO "
								+ StringHandling.DQUOTE("skripsi")
								+ "."
								+ StringHandling.DQUOTE("cf_buku")
								+ " (\"unique_id\",\"status_sekarang\",\"status_lama\",\"tanggal_ganti_status\",\"tanggal_datang\",\"tanggal_input\") VALUES (?,?,?,?,?,?)");
				com.datastax.driver.core.BoundStatement boundStmt_tCassandraOutput_1 = null;

				java.util.List<String> columns_tCassandraOutput_1 = new java.util.ArrayList<String>();

				columns_tCassandraOutput_1.add("unique_id");

				columns_tCassandraOutput_1.add("status_sekarang");

				columns_tCassandraOutput_1.add("status_lama");

				columns_tCassandraOutput_1.add("tanggal_status_ganti");

				columns_tCassandraOutput_1.add("tanggal_datang");

				columns_tCassandraOutput_1.add("tanggal_input");

				org.talend.bigdata.cassandra.BatchExecutor cassandraBatchExec_tCassandraOutput_1 = new org.talend.bigdata.cassandra.BatchExecutor(
						connection_tCassandraOutput_1,
						StringHandling.DQUOTE("skripsi"),
						StringHandling.DQUOTE("cf_buku"),
						columns_tCassandraOutput_1,
						org.talend.bigdata.cassandra.BatchGroupingKey
								.fromString("PARTITION"), 1000, false, 5);

				/**
				 * [tCassandraOutput_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				class BytesLimit65535_tJavaRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_1().limitLog4jByte();

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tCassandraInput_1 begin ] start
				 */

				ok_Hash.put("tCassandraInput_1", false);
				start_Hash.put("tCassandraInput_1", System.currentTimeMillis());

				currentComponent = "tCassandraInput_1";

				int tos_count_tCassandraInput_1 = 0;

				class BytesLimit65535_tCassandraInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tCassandraInput_1().limitLog4jByte();

				com.datastax.driver.core.Cluster cluster_tCassandraInput_1 = (com.datastax.driver.core.Cluster) globalMap
						.get("cluster_tCassandraConnection_1");
				com.datastax.driver.core.Session connection_tCassandraInput_1 = (com.datastax.driver.core.Session) globalMap
						.get("connection_tCassandraConnection_1");

				com.datastax.driver.core.ResultSet rs_tCassandraInput_1 = connection_tCassandraInput_1
						.execute("select tanggal_datang, tanggal_input, unique_id, status_sekarang, kode_buku from skripsi.cf_buku where kode_buku in ("
								+ globalMap.get("ids_str")
								+ ") allow filtering");
				int nb_line_tCassandraInput_1 = 0;
				for (com.datastax.driver.core.Row row_tCassandraInput_1 : rs_tCassandraInput_1) {
					if (row_tCassandraInput_1.isNull("\"unique_id\"")) {
						row2.unique_id = null;
					} else {

						row2.unique_id = row_tCassandraInput_1.getUUID(
								"\"unique_id\"").toString();

					}

					if (row_tCassandraInput_1.isNull("\"status_sekarang\"")) {
						row2.status_sekarang = null;
					} else {

						row2.status_sekarang = row_tCassandraInput_1
								.getString("\"status_sekarang\"");

					}

					if (row_tCassandraInput_1.isNull("\"tanggal_datang\"")) {
						row2.tanggal_datang = null;
					} else {

						row2.tanggal_datang = new java.util.Date(
								row_tCassandraInput_1.getDate(
										"\"tanggal_datang\"")
										.getMillisSinceEpoch());

					}

					if (row_tCassandraInput_1.isNull("\"tanggal_input\"")) {
						row2.tanggal_input = null;
					} else {

						row2.tanggal_input = new java.util.Date(
								row_tCassandraInput_1.getDate(
										"\"tanggal_input\"")
										.getMillisSinceEpoch());

					}

					if (row_tCassandraInput_1.isNull("\"kode_buku\"")) {
						row2.kode_buku = null;
					} else {

						row2.kode_buku = row_tCassandraInput_1
								.getString("\"kode_buku\"");

					}

					nb_line_tCassandraInput_1++;

					/**
					 * [tCassandraInput_1 begin ] stop
					 */

					/**
					 * [tCassandraInput_1 main ] start
					 */

					currentComponent = "tCassandraInput_1";

					tos_count_tCassandraInput_1++;

					/**
					 * [tCassandraInput_1 main ] stop
					 */

					/**
					 * [tCassandraInput_1 process_data_begin ] start
					 */

					currentComponent = "tCassandraInput_1";

					/**
					 * [tCassandraInput_1 process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_1 main ] start
					 */

					currentComponent = "tJavaRow_1";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					row3.unique_id = row2.unique_id;
					row3.status_lama = row2.status_sekarang;
					row3.tanggal_status_ganti = ((buku_scd_data) globalMap
							.get(row2.kode_buku)).tanggal_update;
					row3.status_sekarang = ((buku_scd_data) globalMap
							.get(row2.kode_buku)).status_sekarang;
					row3.tanggal_datang = row2.tanggal_datang;
					row3.tanggal_input = row2.tanggal_input;
					nb_line_tJavaRow_1++;

					tos_count_tJavaRow_1++;

					/**
					 * [tJavaRow_1 main ] stop
					 */

					/**
					 * [tJavaRow_1 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_1";

					/**
					 * [tJavaRow_1 process_data_begin ] stop
					 */

					/**
					 * [tCassandraOutput_1 main ] start
					 */

					currentComponent = "tCassandraOutput_1";

					// row3
					// row3

					if (execStat) {
						runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
					}

					boundStmt_tCassandraOutput_1 = new com.datastax.driver.core.BoundStatement(
							prepareStmt_tCassandraOutput_1);

					if (row3.unique_id == null) {
						boundStmt_tCassandraOutput_1.setToNull(0);
					} else {
						boundStmt_tCassandraOutput_1.setUUID(0,
								java.util.UUID.fromString(row3.unique_id));
					}
					if (row3.status_sekarang == null) {
						boundStmt_tCassandraOutput_1.setToNull(1);
					} else {
						boundStmt_tCassandraOutput_1.setString(1,
								row3.status_sekarang);
					}
					if (row3.status_lama == null) {
						boundStmt_tCassandraOutput_1.setToNull(2);
					} else {
						boundStmt_tCassandraOutput_1.setString(2,
								row3.status_lama);
					}
					if (row3.tanggal_status_ganti == null) {
						boundStmt_tCassandraOutput_1.setToNull(3);
					} else {
						boundStmt_tCassandraOutput_1
								.setDate(
										3,
										com.datastax.driver.core.LocalDate
												.fromMillisSinceEpoch(row3.tanggal_status_ganti
														.getTime()));
					}
					if (row3.tanggal_datang == null) {
						boundStmt_tCassandraOutput_1.setToNull(4);
					} else {
						boundStmt_tCassandraOutput_1
								.setDate(
										4,
										com.datastax.driver.core.LocalDate
												.fromMillisSinceEpoch(row3.tanggal_datang
														.getTime()));
					}
					if (row3.tanggal_input == null) {
						boundStmt_tCassandraOutput_1.setToNull(5);
					} else {
						boundStmt_tCassandraOutput_1
								.setDate(
										5,
										com.datastax.driver.core.LocalDate
												.fromMillisSinceEpoch(row3.tanggal_input
														.getTime()));
					}

					cassandraBatchExec_tCassandraOutput_1
							.addOrExecBatch(boundStmt_tCassandraOutput_1);

					nb_line_tCassandraOutput_1++;

					tos_count_tCassandraOutput_1++;

					/**
					 * [tCassandraOutput_1 main ] stop
					 */

					/**
					 * [tCassandraOutput_1 process_data_begin ] start
					 */

					currentComponent = "tCassandraOutput_1";

					/**
					 * [tCassandraOutput_1 process_data_begin ] stop
					 */

					/**
					 * [tCassandraOutput_1 process_data_end ] start
					 */

					currentComponent = "tCassandraOutput_1";

					/**
					 * [tCassandraOutput_1 process_data_end ] stop
					 */

					/**
					 * [tJavaRow_1 process_data_end ] start
					 */

					currentComponent = "tJavaRow_1";

					/**
					 * [tJavaRow_1 process_data_end ] stop
					 */

					/**
					 * [tCassandraInput_1 process_data_end ] start
					 */

					currentComponent = "tCassandraInput_1";

					/**
					 * [tCassandraInput_1 process_data_end ] stop
					 */

					/**
					 * [tCassandraInput_1 end ] start
					 */

					currentComponent = "tCassandraInput_1";

				}
				globalMap.put("tCassandraInput_1_NB_LINE",
						nb_line_tCassandraInput_1);

				ok_Hash.put("tCassandraInput_1", true);
				end_Hash.put("tCassandraInput_1", System.currentTimeMillis());

				/**
				 * [tCassandraInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tCassandraOutput_1 end ] start
				 */

				currentComponent = "tCassandraOutput_1";

				cassandraBatchExec_tCassandraOutput_1.endBatch();
				globalMap.put("tCassandraOutput_1_NB_LINE",
						nb_line_tCassandraOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tCassandraOutput_1", true);
				end_Hash.put("tCassandraOutput_1", System.currentTimeMillis());

				/**
				 * [tCassandraOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tCassandraInput_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tCassandraInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tCassandraInput_1 finally ] start
				 */

				currentComponent = "tCassandraInput_1";

				/**
				 * [tCassandraInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tCassandraOutput_1 finally ] start
				 */

				currentComponent = "tCassandraOutput_1";

				/**
				 * [tCassandraOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCassandraInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];

		public String nama_jurusan;

		public String getNama_jurusan() {
			return this.nama_jurusan;
		}

		public Integer tahun;

		public Integer getTahun() {
			return this.tahun;
		}

		public java.util.Date tgl_pinjam;

		public java.util.Date getTgl_pinjam() {
			return this.tgl_pinjam;
		}

		public String nama_kategori;

		public String getNama_kategori() {
			return this.nama_kategori;
		}

		public String nama_koleksi;

		public String getNama_koleksi() {
			return this.nama_koleksi;
		}

		public String unique_id;

		public String getUnique_id() {
			return this.unique_id;
		}

		public java.util.Date tanggal_status_ganti;

		public java.util.Date getTanggal_status_ganti() {
			return this.tanggal_status_ganti;
		}

		public String status_lama;

		public String getStatus_lama() {
			return this.status_lama;
		}

		public String status_sekarang;

		public String getStatus_sekarang() {
			return this.status_sekarang;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.nama_jurusan = readString(dis);

					this.tahun = readInteger(dis);

					this.tgl_pinjam = readDate(dis);

					this.nama_kategori = readString(dis);

					this.nama_koleksi = readString(dis);

					this.unique_id = readString(dis);

					this.tanggal_status_ganti = readDate(dis);

					this.status_lama = readString(dis);

					this.status_sekarang = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.nama_jurusan, dos);

				// Integer

				writeInteger(this.tahun, dos);

				// java.util.Date

				writeDate(this.tgl_pinjam, dos);

				// String

				writeString(this.nama_kategori, dos);

				// String

				writeString(this.nama_koleksi, dos);

				// String

				writeString(this.unique_id, dos);

				// java.util.Date

				writeDate(this.tanggal_status_ganti, dos);

				// String

				writeString(this.status_lama, dos);

				// String

				writeString(this.status_sekarang, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("nama_jurusan=" + nama_jurusan);
			sb.append(",tahun=" + String.valueOf(tahun));
			sb.append(",tgl_pinjam=" + String.valueOf(tgl_pinjam));
			sb.append(",nama_kategori=" + nama_kategori);
			sb.append(",nama_koleksi=" + nama_koleksi);
			sb.append(",unique_id=" + unique_id);
			sb.append(",tanggal_status_ganti="
					+ String.valueOf(tanggal_status_ganti));
			sb.append(",status_lama=" + status_lama);
			sb.append(",status_sekarang=" + status_sekarang);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];

		public String status_sekarang;

		public String getStatus_sekarang() {
			return this.status_sekarang;
		}

		public String nama_jurusan;

		public String getNama_jurusan() {
			return this.nama_jurusan;
		}

		public Integer tahun;

		public Integer getTahun() {
			return this.tahun;
		}

		public java.util.Date tgl_pinjam;

		public java.util.Date getTgl_pinjam() {
			return this.tgl_pinjam;
		}

		public String nama_kategori;

		public String getNama_kategori() {
			return this.nama_kategori;
		}

		public String nama_koleksi;

		public String getNama_koleksi() {
			return this.nama_koleksi;
		}

		public String unique_id;

		public String getUnique_id() {
			return this.unique_id;
		}

		public String kode_buku;

		public String getKode_buku() {
			return this.kode_buku;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.status_sekarang = readString(dis);

					this.nama_jurusan = readString(dis);

					this.tahun = readInteger(dis);

					this.tgl_pinjam = readDate(dis);

					this.nama_kategori = readString(dis);

					this.nama_koleksi = readString(dis);

					this.unique_id = readString(dis);

					this.kode_buku = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status_sekarang, dos);

				// String

				writeString(this.nama_jurusan, dos);

				// Integer

				writeInteger(this.tahun, dos);

				// java.util.Date

				writeDate(this.tgl_pinjam, dos);

				// String

				writeString(this.nama_kategori, dos);

				// String

				writeString(this.nama_koleksi, dos);

				// String

				writeString(this.unique_id, dos);

				// String

				writeString(this.kode_buku, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status_sekarang=" + status_sekarang);
			sb.append(",nama_jurusan=" + nama_jurusan);
			sb.append(",tahun=" + String.valueOf(tahun));
			sb.append(",tgl_pinjam=" + String.valueOf(tgl_pinjam));
			sb.append(",nama_kategori=" + nama_kategori);
			sb.append(",nama_koleksi=" + nama_koleksi);
			sb.append(",unique_id=" + unique_id);
			sb.append(",kode_buku=" + kode_buku);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tCassandraInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tCassandraInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tCassandraOutput_2 begin ] start
				 */

				ok_Hash.put("tCassandraOutput_2", false);
				start_Hash
						.put("tCassandraOutput_2", System.currentTimeMillis());

				currentComponent = "tCassandraOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tCassandraOutput_2 = 0;

				class BytesLimit65535_tCassandraOutput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tCassandraOutput_2().limitLog4jByte();

				com.datastax.driver.core.Cluster cluster_tCassandraOutput_2 = (com.datastax.driver.core.Cluster) globalMap
						.get("cluster_tCassandraConnection_1");
				com.datastax.driver.core.Session connection_tCassandraOutput_2 = (com.datastax.driver.core.Session) globalMap
						.get("connection_tCassandraConnection_1");

				int nb_line_tCassandraOutput_2 = 0;
				com.datastax.driver.core.PreparedStatement prepareStmt_tCassandraOutput_2 = null;
				prepareStmt_tCassandraOutput_2 = connection_tCassandraOutput_2
						.prepare("INSERT INTO "
								+ StringHandling.DQUOTE("skripsi")
								+ "."
								+ StringHandling
										.DQUOTE("cf_transaksi_jurusan_kategori")
								+ " (\"nama_jurusan\",tahun,\"tgl_pinjam\",\"nama_kategori\",\"nama_koleksi\",\"unique_id\",\"tanggal_ganti_status\",\"status_lama\",\"status_sekarang\") VALUES (?,?,?,?,?,?,?,?,?)");
				com.datastax.driver.core.BoundStatement boundStmt_tCassandraOutput_2 = null;

				java.util.List<String> columns_tCassandraOutput_2 = new java.util.ArrayList<String>();

				columns_tCassandraOutput_2.add("nama_jurusan");

				columns_tCassandraOutput_2.add("tahun");

				columns_tCassandraOutput_2.add("tgl_pinjam");

				columns_tCassandraOutput_2.add("nama_kategori");

				columns_tCassandraOutput_2.add("nama_koleksi");

				columns_tCassandraOutput_2.add("unique_id");

				columns_tCassandraOutput_2.add("tanggal_status_ganti");

				columns_tCassandraOutput_2.add("status_lama");

				columns_tCassandraOutput_2.add("status_sekarang");

				org.talend.bigdata.cassandra.BatchExecutor cassandraBatchExec_tCassandraOutput_2 = new org.talend.bigdata.cassandra.BatchExecutor(
						connection_tCassandraOutput_2,
						StringHandling.DQUOTE("skripsi"),
						StringHandling.DQUOTE("cf_transaksi_jurusan_kategori"),
						columns_tCassandraOutput_2,
						org.talend.bigdata.cassandra.BatchGroupingKey
								.fromString("PARTITION"), 1000, false, 5);

				/**
				 * [tCassandraOutput_2 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_3 = 0;

				class BytesLimit65535_tJavaRow_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_3().limitLog4jByte();

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tCassandraInput_2 begin ] start
				 */

				ok_Hash.put("tCassandraInput_2", false);
				start_Hash.put("tCassandraInput_2", System.currentTimeMillis());

				currentComponent = "tCassandraInput_2";

				int tos_count_tCassandraInput_2 = 0;

				class BytesLimit65535_tCassandraInput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tCassandraInput_2().limitLog4jByte();

				com.datastax.driver.core.Cluster cluster_tCassandraInput_2 = (com.datastax.driver.core.Cluster) globalMap
						.get("cluster_tCassandraConnection_1");
				com.datastax.driver.core.Session connection_tCassandraInput_2 = (com.datastax.driver.core.Session) globalMap
						.get("connection_tCassandraConnection_1");

				com.datastax.driver.core.ResultSet rs_tCassandraInput_2 = connection_tCassandraInput_2
						.execute("select nama_jurusan, tahun, tgl_pinjam, nama_kategori, nama_koleksi, unique_id, status_sekarang,kode_buku from skripsi.cf_transaksi_jurusan_kategori where kode_buku in ("
								+ globalMap.get("ids_str")
								+ ") allow filtering");
				int nb_line_tCassandraInput_2 = 0;
				for (com.datastax.driver.core.Row row_tCassandraInput_2 : rs_tCassandraInput_2) {
					if (row_tCassandraInput_2.isNull("\"status_sekarang\"")) {
						row6.status_sekarang = null;
					} else {

						row6.status_sekarang = row_tCassandraInput_2
								.getString("\"status_sekarang\"");

					}

					if (row_tCassandraInput_2.isNull("\"nama_jurusan\"")) {
						row6.nama_jurusan = null;
					} else {

						row6.nama_jurusan = row_tCassandraInput_2
								.getString("\"nama_jurusan\"");

					}

					if (row_tCassandraInput_2.isNull("\"tahun\"")) {
						row6.tahun = null;
					} else {

						row6.tahun = row_tCassandraInput_2.getInt("\"tahun\"");

					}

					if (row_tCassandraInput_2.isNull("\"tgl_pinjam\"")) {
						row6.tgl_pinjam = null;
					} else {

						row6.tgl_pinjam = new java.util.Date(
								row_tCassandraInput_2.getDate("\"tgl_pinjam\"")
										.getMillisSinceEpoch());

					}

					if (row_tCassandraInput_2.isNull("\"nama_kategori\"")) {
						row6.nama_kategori = null;
					} else {

						row6.nama_kategori = row_tCassandraInput_2
								.getString("\"nama_kategori\"");

					}

					if (row_tCassandraInput_2.isNull("\"nama_koleksi\"")) {
						row6.nama_koleksi = null;
					} else {

						row6.nama_koleksi = row_tCassandraInput_2
								.getString("\"nama_koleksi\"");

					}

					if (row_tCassandraInput_2.isNull("\"unique_id\"")) {
						row6.unique_id = null;
					} else {

						row6.unique_id = row_tCassandraInput_2.getUUID(
								"\"unique_id\"").toString();

					}

					if (row_tCassandraInput_2.isNull("\"kode_buku\"")) {
						row6.kode_buku = null;
					} else {

						row6.kode_buku = row_tCassandraInput_2
								.getString("\"kode_buku\"");

					}

					nb_line_tCassandraInput_2++;

					/**
					 * [tCassandraInput_2 begin ] stop
					 */

					/**
					 * [tCassandraInput_2 main ] start
					 */

					currentComponent = "tCassandraInput_2";

					tos_count_tCassandraInput_2++;

					/**
					 * [tCassandraInput_2 main ] stop
					 */

					/**
					 * [tCassandraInput_2 process_data_begin ] start
					 */

					currentComponent = "tCassandraInput_2";

					/**
					 * [tCassandraInput_2 process_data_begin ] stop
					 */

					/**
					 * [tJavaRow_3 main ] start
					 */

					currentComponent = "tJavaRow_3";

					// row6
					// row6

					if (execStat) {
						runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
					}

					// new data
					row7.status_lama = row6.status_sekarang;
					row7.tanggal_status_ganti = ((buku_scd_data) globalMap
							.get(row6.kode_buku)).tanggal_update;
					row7.status_sekarang = ((buku_scd_data) globalMap
							.get(row6.kode_buku)).status_sekarang;

					// primary key purpose
					row7.nama_jurusan = row6.nama_jurusan;
					row7.tahun = row6.tahun;
					row7.tgl_pinjam = row6.tgl_pinjam;
					row7.nama_kategori = row6.nama_kategori;
					row7.nama_koleksi = row6.nama_koleksi;
					row7.unique_id = row6.unique_id;
					nb_line_tJavaRow_3++;

					tos_count_tJavaRow_3++;

					/**
					 * [tJavaRow_3 main ] stop
					 */

					/**
					 * [tJavaRow_3 process_data_begin ] start
					 */

					currentComponent = "tJavaRow_3";

					/**
					 * [tJavaRow_3 process_data_begin ] stop
					 */

					/**
					 * [tCassandraOutput_2 main ] start
					 */

					currentComponent = "tCassandraOutput_2";

					// row7
					// row7

					if (execStat) {
						runStat.updateStatOnConnection("row7" + iterateId, 1, 1);
					}

					boundStmt_tCassandraOutput_2 = new com.datastax.driver.core.BoundStatement(
							prepareStmt_tCassandraOutput_2);

					if (row7.nama_jurusan == null) {
						boundStmt_tCassandraOutput_2.setToNull(0);
					} else {
						boundStmt_tCassandraOutput_2.setString(0,
								row7.nama_jurusan);
					}
					if (row7.tahun == null) {
						boundStmt_tCassandraOutput_2.setToNull(1);
					} else {
						boundStmt_tCassandraOutput_2.setInt(1, row7.tahun);
					}
					if (row7.tgl_pinjam == null) {
						boundStmt_tCassandraOutput_2.setToNull(2);
					} else {
						boundStmt_tCassandraOutput_2.setDate(2,
								com.datastax.driver.core.LocalDate
										.fromMillisSinceEpoch(row7.tgl_pinjam
												.getTime()));
					}
					if (row7.nama_kategori == null) {
						boundStmt_tCassandraOutput_2.setToNull(3);
					} else {
						boundStmt_tCassandraOutput_2.setString(3,
								row7.nama_kategori);
					}
					if (row7.nama_koleksi == null) {
						boundStmt_tCassandraOutput_2.setToNull(4);
					} else {
						boundStmt_tCassandraOutput_2.setString(4,
								row7.nama_koleksi);
					}
					if (row7.unique_id == null) {
						boundStmt_tCassandraOutput_2.setToNull(5);
					} else {
						boundStmt_tCassandraOutput_2.setUUID(5,
								java.util.UUID.fromString(row7.unique_id));
					}
					if (row7.tanggal_status_ganti == null) {
						boundStmt_tCassandraOutput_2.setToNull(6);
					} else {
						boundStmt_tCassandraOutput_2
								.setDate(
										6,
										com.datastax.driver.core.LocalDate
												.fromMillisSinceEpoch(row7.tanggal_status_ganti
														.getTime()));
					}
					if (row7.status_lama == null) {
						boundStmt_tCassandraOutput_2.setToNull(7);
					} else {
						boundStmt_tCassandraOutput_2.setString(7,
								row7.status_lama);
					}
					if (row7.status_sekarang == null) {
						boundStmt_tCassandraOutput_2.setToNull(8);
					} else {
						boundStmt_tCassandraOutput_2.setString(8,
								row7.status_sekarang);
					}

					cassandraBatchExec_tCassandraOutput_2
							.addOrExecBatch(boundStmt_tCassandraOutput_2);

					nb_line_tCassandraOutput_2++;

					tos_count_tCassandraOutput_2++;

					/**
					 * [tCassandraOutput_2 main ] stop
					 */

					/**
					 * [tCassandraOutput_2 process_data_begin ] start
					 */

					currentComponent = "tCassandraOutput_2";

					/**
					 * [tCassandraOutput_2 process_data_begin ] stop
					 */

					/**
					 * [tCassandraOutput_2 process_data_end ] start
					 */

					currentComponent = "tCassandraOutput_2";

					/**
					 * [tCassandraOutput_2 process_data_end ] stop
					 */

					/**
					 * [tJavaRow_3 process_data_end ] start
					 */

					currentComponent = "tJavaRow_3";

					/**
					 * [tJavaRow_3 process_data_end ] stop
					 */

					/**
					 * [tCassandraInput_2 process_data_end ] start
					 */

					currentComponent = "tCassandraInput_2";

					/**
					 * [tCassandraInput_2 process_data_end ] stop
					 */

					/**
					 * [tCassandraInput_2 end ] start
					 */

					currentComponent = "tCassandraInput_2";

				}
				globalMap.put("tCassandraInput_2_NB_LINE",
						nb_line_tCassandraInput_2);

				ok_Hash.put("tCassandraInput_2", true);
				end_Hash.put("tCassandraInput_2", System.currentTimeMillis());

				/**
				 * [tCassandraInput_2 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tCassandraOutput_2 end ] start
				 */

				currentComponent = "tCassandraOutput_2";

				cassandraBatchExec_tCassandraOutput_2.endBatch();
				globalMap.put("tCassandraOutput_2_NB_LINE",
						nb_line_tCassandraOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tCassandraOutput_2", true);
				end_Hash.put("tCassandraOutput_2", System.currentTimeMillis());

				/**
				 * [tCassandraOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tCassandraInput_2 finally ] start
				 */

				currentComponent = "tCassandraInput_2";

				/**
				 * [tCassandraInput_2 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tCassandraOutput_2 finally ] start
				 */

				currentComponent = "tCassandraOutput_2";

				/**
				 * [tCassandraOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tCassandraInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_SKRIPSI_scd_buku_cassandra = new byte[0];
		static byte[] commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String kode_kondisi;

		public String getKode_kondisi() {
			return this.kode_kondisi;
		}

		public String kondisi;

		public String getKondisi() {
			return this.kondisi;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.kode_kondisi == null) ? 0 : this.kode_kondisi
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.kode_kondisi == null) {
				if (other.kode_kondisi != null)
					return false;

			} else if (!this.kode_kondisi.equals(other.kode_kondisi))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.kode_kondisi = this.kode_kondisi;
			other.kondisi = this.kondisi;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.kode_kondisi = this.kode_kondisi;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SKRIPSI_scd_buku_cassandra.length) {
					if (length < 1024
							&& commonByteArray_SKRIPSI_scd_buku_cassandra.length == 0) {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[1024];
					} else {
						commonByteArray_SKRIPSI_scd_buku_cassandra = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SKRIPSI_scd_buku_cassandra, 0,
						length);
				strReturn = new String(
						commonByteArray_SKRIPSI_scd_buku_cassandra, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SKRIPSI_scd_buku_cassandra) {

				try {

					int length = 0;

					this.kode_kondisi = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.kode_kondisi, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.kondisi = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.kondisi, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("kode_kondisi=" + kode_kondisi);
			sb.append(",kondisi=" + kondisi);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.kode_kondisi,
					other.kode_kondisi);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				class BytesLimit65535_tAdvancedHash_row4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

				// connection name:row4
				// source node:tFileInputDelimited_2 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row5,row4) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				class BytesLimit65535_tFileInputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				"D:/Apps Installer/TOS_BD-20180411_1414-V7.0.1/workspace/kondisi_buku.csv"/**
				 * 
				 * End field tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 0; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 0; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row4 = null;

						row4 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row4 = new row4Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.kode_kondisi = null;

								row4.kondisi = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.kode_kondisi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.kode_kondisi = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.kondisi = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.kondisi = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tAdvancedHash_row4 main ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							row4Struct row4_HashRow = new row4Struct();

							row4_HashRow.kode_kondisi = row4.kode_kondisi;

							row4_HashRow.kondisi = row4.kondisi;

							tHash_Lookup_row4.put(row4_HashRow);

							tos_count_tAdvancedHash_row4++;

							/**
							 * [tAdvancedHash_row4 main ] stop
							 */

							/**
							 * [tAdvancedHash_row4 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							/**
							 * [tAdvancedHash_row4 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row4 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row4";

							/**
							 * [tAdvancedHash_row4 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final scd_buku_cassandra scd_buku_cassandraClass = new scd_buku_cassandra();

		int exitCode = scd_buku_cassandraClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = scd_buku_cassandra.class
					.getClassLoader().getResourceAsStream(
							"skripsi/scd_buku_cassandra_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = scd_buku_cassandra.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : scd_buku_cassandra");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeCassandraConnections();

	}

	private void closeCassandraConnections() {
		try {
			Object obj_cluster;
			Object obj_conn;
			obj_cluster = globalMap.remove("cluster_tCassandraConnection_1");
			obj_conn = globalMap.remove("connection_tCassandraConnection_1");
			if (obj_conn != null) {
				((com.datastax.driver.core.Session) obj_conn).close();
			}
			if (obj_cluster != null) {
				((com.datastax.driver.core.Cluster) obj_cluster).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("connection_tCassandraConnection_1",
				globalMap.get("connection_tCassandraConnection_1"));
		connections.put("cluster_tCassandraConnection_1",
				globalMap.get("cluster_tCassandraConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 149226 characters generated by Talend Open Studio for Big Data on the October
 * 8, 2018 8:35:32 PM ICT
 ************************************************************************************************/
